#!/usr/bin/python
"""
# PSEUDO CODE
# -----------
# 
#    ALL BLOGS & TAGS
# blogger_blogs = {'blog1' : None, 'blog2' : None, 'blog3' : None}
# for name in blogger_blogs:
#     blogger_blogs[name] = {
#         'url'   : 'http://%s/molhokwai.blogspot.com',
#         'tags'  : Blogger.blog.get_tags(name), # returns dict
#         'recent_posts' : Blogger.blog.get_recent_posts(name)
#     }
# all_tags = merge_tags(blogger_blogs)
# 
#     GET TAGS POSTS
# tags = ['tag1', 'tag2', 'tag3']
# for name in blogger_blogs:
#     for i in range(len(tags)):
#         blogger_blogs[name]['tags'][tags[i]] = Blogger.blog.get_tags_posts(name,tags[i])
# 
#     SEARCH BLOGS
# _filter = 'a search query'
# for name in blogger_blogs:
#     blogger_blogs[name][_filter] = Blogger.blog.search_posts(name,_filter)
# 
"""

from types import *
import sys
from gdata import service
import gdata
import atom

i = 0

username = 'molhokwai@gmail.com'
password = 'xxxxx'
source = 'molhokwai.net'

for arg in sys.argv:
    if arg.find('username=')==0: username = arg[9:]
    elif arg.find('password=')==0: password = arg[9:]
    elif arg.find('source=')==0: source = arg[7:]
    i+=1

def GetBloggerService(username, password, source):
    _service = service.GDataService(username, password)
    _service.source = source
    _service.service = 'blogger'
    _service.account_type = 'GOOGLE'
    _service.server = 'www.blogger.com'
    _service.ProgrammaticLogin()
    return _service
blogger_service = GetBloggerService(username, password, source)

    
blogs=[]
def GetMetas(entry_id_text, parent_item='user'):
    # structure sample: "tag:blogger.com,1999:user-123456789123.blog-1234567891234567891"
    # tag
    s = entry_id_text.split(',')
    tag = s[0].split(':')[1]
    # year
    s = s[1].split(':')
    year = s[0]
    # ids
    s = s[1].split('.')
    parent_item_id = s[0].split('-')[1]
    item_id = s[1].split('-')[1]
    return {
        'id' : item_id,
        'tag' : tag,
        'year' : year,
        parent_item : parent_item_id
    }

            
def GetBlogs(blogger_service):
    query = service.Query()
    query.feed = '/feeds/default/blogs'
    feed = blogger_service.Get(query.ToUri())

    for entry in feed.entry:
        data = GetMetas(entry.id.text, parent_item='user')
        data['title'] = entry.title.text
        data['posts'] = []
        data['categories'] = []
        blogs.append(data)

GetBlogs(blogger_service)

def GetBlogIndexAndData(title):
    for i in range(len(blogs)):
        if blogs[i]['title'] == title:
            return i,blogs[i]
        i+=1
def GetBlogCategories(atomCategories):
    return map(lambda x: x.term, atomCategories)

_do=True
while(_do):
    def blog_choice_data():
        print "Enter a number:"
        for i in range(len(blogs)):
            print "\t%i : %s " % (i, blogs[i]['title'])
        i = int(raw_input())
        return i, blogs[i]

    def blog_post_choice_data(blog_index):
        posts = blogs[blog_index]['posts']
        print "\tEnter a number:"
        pr = ''
        for i in range(len(posts)):
            pr += "\t%i : %s " % (i, posts[i]['title'])
        print pr
        i = int(raw_input())
        return i, posts[i]


    print "Enter one of the options below:"
    print "\t1 : User Blog Titles"
    print "\t2 : Posts in Categories"
    print "\t3 : Blog All Posts"
    print "\t4 : Bog Post Comment(s)"
    print "\t5 : Post A Comment"
    print "\tq : Exit"

    choice=raw_input()
    _do = not choice == "q"
    if not _do: sys.exit()

    if choice == "1":
        def PrintUserBlogTitles(blogger_service):
            query = service.Query()
            query.feed = '/feeds/default/blogs'
            feed = blogger_service.Get(query.ToUri())

            print feed.title.text
            for entry in feed.entry:
                print "\t%s | %s " % (entry.title.text, entry.id.text)

        PrintUserBlogTitles(blogger_service)

    elif choice == "2":
        def PrintPostsInCategories(blogger_service, blog_id, categories):
            query = service.Query()
            query.feed = '/feeds/' + blog_id + '/posts/default'
            query.categories = categories
            feed = blogger_service.Get(query.ToUri())

            print "%s posts in categories: %s" % (feed.title.text,  ','.join(categories))
            j = 0
            for entry in feed.entry:
                if j==0:
                    pass
                print "\t %s - categories : %s" % (entry.title.text, ','.join(GetBlogCategories(entry.category)))
                #print "\t" + entry.content.text
                #print "\t" + entry.updated.text
                j+=1
            print

        blog_index, blog_data = blog_choice_data()

        print "Enter categories as: cat1,cat2,cat3..."
        categories=raw_input().split(',')

        PrintPostsInCategories(blogger_service, blog_data['id'], categories)

    elif choice in ["3", "4", "5"]:

        def GetAllPosts(blogger_service, blog_index, do_print=True):
            blog_id=blogs[blog_index]['id']
            feed = blogger_service.GetFeed('/feeds/' + blog_id + '/posts/default')

            blogs[blog_index]['posts'] = []
            blogs[blog_index]['categories'] = []
            for entry in feed.entry:
                catgs=GetBlogCategories(entry.category)
                data = GetMetas(entry.id.text, parent_item='blog')
                data['title'] = entry.title.text
                data['content'] = entry.content.text
                data['updated'] = entry.updated.text
                data['categories'] = ','.join(catgs)
                data['comments'] = []
                blogs[blog_index]['posts'].append(data)
                if do_print:
                    print "\t%s - updated: %s - categories: %s \n\t\t%s " % (entry.title.text, entry.updated.text, ','.join(catgs), entry.content.text)
                for c in catgs:
                    if c not in blogs[blog_index]['categories']:
                        blogs[blog_index]['categories'].append(c)
            print

        if choice == "3":
            blog_index, blog_data = blog_choice_data()
            GetAllPosts(blogger_service, blog_index)

        elif choice in ["4", "5"]:

            def PrintAllComments(blogger_service, blog_index, post_index):
                blog_id = blogs[blog_index]['id']
                post_id = blogs[blog_index]['posts'][post_index]['id']

                feed_url = '/feeds/' + blog_id + '/' + post_id + '/comments/default'
                try : 
                    feed = blogger_service.Get(feed_url)

                    print feed.title.text
                    blogs[blog_index]['posts'][post_index]['comments'] = []
                    if len(feed.entry)>0:
                        for entry in feed.entry:
                            print "\t" + entry.title.text
                            print "\t" + entry.updated.text
                            data = GetMetas(entry.id.text, parent_item = 'post')
                            data['title'] = entry.title.text
                            data['content'] = entry.content.text
                            data['updated'] = entry.updated.text
                            blogs[blog_index]['posts'][post_index]['comments'].append(data)
                            print repr(data)
                    else:
                        print "No comment found"
                    print

                except gdata.service.RequestError, err:
                    print "Error : %s " % str(err)
                print

            def CreateComment(blogger_service, blog_id, post_id, comment_text='Mostly harmless'):
                feed_uri = '/feeds/' + blog_id + '/' + post_id + '/comments/default'

                entry = gdata.GDataEntry()
                entry.content = atom.Content(content_type='xhtml', text=comment_text)
                return blogger_service.Post(entry, feed_uri)

            blog_index, blog_data = blog_choice_data()
            if len(blog_data['posts'])==0:
                GetAllPosts(blogger_service, blog_index, do_print=False)
            post_index, post = blog_post_choice_data(blog_index)

            if choice == "4":
                PrintAllComments(blogger_service, blog_index, post_index)

            elif choice == "5":
                print "Your google username and password are required each time you wish to enter a comment."
                c_username = raw_input('Your google username : ')
                c_password = raw_input('Your google password : ')
                c_source = raw_input('(Optional) Your website url : ')
                if not c_source : c_source = source

                c_blogger_service = GetBloggerService(c_username, c_password, c_source)
                print str(CreateComment(c_blogger_service, blog_data['id'], post['id'], raw_input('Your comment : ')))


