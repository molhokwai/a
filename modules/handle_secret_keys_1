#!/usr/bin/env python
import sys
import os
import re

from types import *
# FILE ARGUMENTS AND CONTEXT / GLOBAL VARIABLES AND OBJECTS 
print """
	Required Arguments:
	------------------
		action: mask_store_keys | restore_keys

	Optional Arguments:
	------------------
		app_path: path to the application
		store_fname: the store file name
		fpath_keys_regexes : path to a json file containing the files keys regexes dict
		fpath_keys_replace : path to a json file containing the files replacement key:values to apply dict
"""
i=0
filepath = None
dirpath = None

action = None
app_path = '/home/herve/dev_molhokwai.net.a'
store_fname = None 
fpath_keys_regexes = {
	'%s/models/0_db.py'%app_path : ['(auth\.settings\.hmac\_key=)(\'.*\')', '(api\_key=)(\'.*\')', '(mail\.settings\.login=)(\'.*\')']	
}
fpath_keys_replaces = None

for arg in sys.argv:
	done = False
	base_regex = '[-]{0,2}[%s][=]{0,1}[\'\"]{0,1}(.*)[\'\"]{0,1}'
	args_a = {	
			'action' : lambda x: action = x, 
			'app_path': lambda x: app_path = x, 
			'store_fname' : lambda x: store_fname = x, 
			'fpath_keys_regexes': lambda x: fpath_keys_regexes = eval(open(x, 'r').read()) , 
			'fpath_values_replaces': lambda x: fpath_keys_replaces = eval(open(x, 'r').read()) 
	}
	args_regexes = [(a,base_regex % a) for a in args_a] 
	for a,regex in args_regexes:
		search = re.search(regex, arg)
		if search:
			args_a[a](search.group(1))
			done = True
				
	if not done:
		if i==0: 
			filepath = os.path.abspath(arg)
			dirpath = os.path.abspath(os.path.dirname(arg))
		if i==1: action = arg
		if i==2: app_path = arg
		if i==3: store_fname = arg
		if i==4:
			f = open(arg, 'r') 
			fpath_keys_regexes = eval(f.read())
			f.close()
		if i==5:
			f = open(arg, 'r') 
			fpath_keys_replaces = eval(f.read())
			f.close()
	i+=1
if store_fname is None:
	store_fname = '%s/handle_secret_keys.store.json'%dirpath

# PROCESS METHODS
def get_replace(key):
	return "'%s'" % "".join(["x" for n in range(len(key))])

def get_mask(key):
	if fpath_keys_replaces:
		return fpath_keys_replaces[key]
	else:
		return "'%s'" % "".join(["x" for n in range(len(key))])

def mask_store_keys():
	fpath_keys_store = {}
	for fpath in fpath_keys_regexes:
		f_keys = ''
		fpath_keys_store[fpath] = {} 
		regexes = fpath_keys_regexes[fpath]
		f_keys_r = open(fpath, 'r')
		for line in f_keys_r:
			f_keys += line
			for i in range(len(regexes)):
				search = re.search(regexes[i], line)
				if search:
					if regexes[i] in fpath_keys_store[fpath]:
						if type(fpath_keys_store[fpath][regexes[i]]) == ListType:
							fpath_keys_store[fpath][regexes[i]].append(search.group(2))
						elif type(fpath_keys_store[fpath][regexes[i]]) == StringType:
							fpath_keys_store[fpath][regexes[i]] = [fpath_keys_store[fpath][regexes[i]],search.group(2)]
					else:	
						fpath_keys_store[fpath][regexes[i]] = search.group(2)
		f_keys_r.close()

		f_masks_w = open(fpath, 'w')
		for k in fpath_keys_store[fpath]:
			keys = []
			if type(fpath_keys_store[fpath][k])==StringType:
				keys.append(fpath_keys_store[fpath][k])
			elif type(fpath_keys_store[fpath][k])==ListType:
				keys = fpath_keys_store[fpath][k]
			else:
				raise Exception("handle_secret_keys:77 : Type fpath_keyss_store[fpath] must be one of String or List")

			for i in range(len(keys)):	  
				key = keys[i] 
				f_keys = f_keys.replace(key, get_replace(key))
		f_masks_w.write(f_keys)
		f_masks_w.close()
		
		print 'done for: %s' % fpath

	f_store_w = open(store_fname, 'w')
	f_store_w.write(str(fpath_keys_store))
	f_store_w.close()
	
	print '------------------'
	print 'done: secret keys masked and stored.'

def restore_keys():
	f_store_w = open(store_fname, 'r')
	fpath_keys_store = eval(f_store_w.read())
	f_store_w.close()

	for fpath in fpath_keys_store:
		f_keys_r = open(fpath, 'r')
		f_keys = ''
		for line in f_keys_r:
			for regex in fpath_keys_store[fpath]:
				search = re.search(regex, line)
				if search:
					key = fpath_keys_store[fpath][regex]
					line = line.replace(get_replace(key), key) 
			f_keys += line
		f_keys_r.close()

		f_keys_w = open(fpath, 'w')
		f_keys_w.write(f_keys)
		f_keys_w.close()

		print 'done for: %s' % fpath

	os.remove(store_fname)

	print '------------------'
	print 'done: secret keys restored.'
		
	

# PROCESS
if action:
	exec('%s()'%action)


