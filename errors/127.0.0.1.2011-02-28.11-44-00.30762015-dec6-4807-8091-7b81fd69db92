(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py'
p4
sS'code'
p5
S'from types import *\n\n###################################\n## CONTROLLER INITIALIZATION\n###################################    \ntry:\n    exec(\'from applications.%s.modules import common\' % this_app)\n    app_objects=Struct(**{\'details\':app_details,\'config\':app_config,\'log_wrapped\':log_wrapped,\'utilities\':utilities})\n    page_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_objects)\nexcept Exception, ex:\n    log_wrapped(\'Er\', ex)\n\n# media_photos module\nexec(\'from applications.%s.modules import media_photos\' % this_app)\n\n# blogger module, Blogger class\nexec(\'from applications.%s.modules.blogger import Blogger\' % this_app)\n\n###################################\n## CONTROLLER FUNCTIONS\n###################################    \n\n# The main page\ndef index():\n    redirect(URL(r=request, f=\'picasa\', args=\'gallery\'))\n    return dict(nake=None)\n\n# Picasa\ndef picasa():\n    area = \'gallery\'\n    if len(request.args)>0:\n        area=request.args[0]\n\n    try:\n        picasa_manager = media_photos.Manage(app_config)\n        if auth.user and auth.user.is_admin:\n            if area in [\'upload\', \'albums\', \'add\', \'edit\', \'delete\'] and not session.gdata_user:\n                session.redirect_url=URL(r=request, f=\'picasa\', args=[area])\n                redirect(URL(r=request, f=\'picasa\', args=[\'login\']))\n            else:\n                picasa_manager = media_photos.Manage(app_config, gdata_user=None, session=session)\n        \n            if area == \'login\':\n                form=FORM(INPUT(_type=\'email\', _name=\'email\', value=auth.user.email),\n                            INPUT(_type=\'password\', _name=\'password\'),\n                            INPUT(_type=\'submit\', _value=T(\'submit\'))\n                )\n                if form.accepts(request.vars, session):\n                    try:\n                        gdata_user={\n                            \'email\' : request.vars.email,\n                            \'password\' : request.vars.password\n                        }\n                        # programmatic login encapsulated in construction\n                        media_photos.Manage(app_config, gdata_user=gdata_user)\n                        session.gdata_user=gdata_user\n        \n                        session.flash = T(\'Login successfull\')\n                        if session.redirect_url:\n                            redirect(session.redirect_url)\n                        else:\n                            redirect(URL(r=request, args=[\'albums\']))\n                    except Exception, ex:\n                        log_wrapped(\'Error\', ex)\n                return dict(nake=None, area=area, form=form, item=\'user\')\n                \n            if area in [\'add\', \'edit\', \'delete\', \'upload\']:\n                # item : album || picture\n                item=request.args[1]\n    \n                if item==\'album\':\n                    if area == \'add\':\n        \n                        form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\'), \n                                        TEXTAREA(_name=\'summary\'),\n                                        INPUT(_type=\'submit\', _value=T(\'submit\'))\n                                      )\n                                )\n                        if form.accepts(request.vars, session):\n                            if area == \'add\':\n                                try:\n                                    album = picasa_manager.client.InsertAlbum(title=request.vars.title, summary=request.vars.summary)\n                                    session.flash = T(\'Album successfully added\')\n                                    redirect(URL(r=request, args=[\'albums\']))\n                                except Exception, ex:\n                                    log_wrapped(\'Error\', ex)\n                                    response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n        \n                        return dict(nake=None, area=area, form=form, item=item)\n        \n                    elif area == \'edit\':\n                        album_id=request.args[2]\n                        album_feed=picasa_manager.get_album_by_id(album_id)\n                        album_photos=picasa_manager.get_album_photos(\n                                            album_id, \n                                            username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                            limit=10\n                                            )\n        \n                        form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\', _value=album_feed.title.text), \n                                        TEXTAREA(_name=\'summary\',  value=album_feed.summary.text),\n                                        INPUT(_type=\'submit\', _value=T(\'submit\'))\n                                      )\n                                )\n                        if form.accepts(request.vars, session):\n                                try:\n                                    album_feed.title.text=request.vars.title\n                                    album_feed.summary.text=request.vars.summary\n                \n                                    updated_album = picasa_manager.client.Put(album_feed, album_feed.GetEditLink().href, converter=gdata.photos.AlbumEntryFromString)\n                                    session.flash = T(\'Album successfully updated\')\n                                    redirect(URL(r=request, args=[\'albums\']))\n                                except Exception, ex:\n                                    log_wrapped(\'Error\', ex)\n                                    response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n        \n                        return dict(nake=None, area=area, form=form, item=item, album=album_photos, album_id=album_id)\n        \n                    elif area == \'delete\':\n                        album_id=request.args[2]\n                        album_feed=picasa_manager.get_album_by_id(album_id)\n                        album_photos=picasa_manager.get_album_photos(\n                                          album_id, \n                                          username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                          limit=10\n                                          )\n        \n                        form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\', _value=album_feed.title.text), \n                                        TEXTAREA(_name=\'summary\',  value=album_feed.summary.text),\n                                        INPUT(_type=\'submit\', _value=T(\'delete\'))\n                                      )\n                                )\n                        if form.accepts(request.vars, session):\n                            try:\n                                picasa_manager.client.Delete(album_feed)\n                                session.flash = T(\'Album deleted\')\n                                redirect(URL(r=request, args=[\'albums\']))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n        \n                        return dict(nake=None, area=area, form=form, item=item, album=album_photos, album_id=album_id)\n    \n                elif item==\'picture\':\n    \n                    if area == \'upload\':\n                        upload_nr=5\n                        album_id=request.args[2]\n                        album_url = \'/data/feed/api/user/%s/albumid/%s\' % (session.gdata_user[\'email\'], album_id)\n        \n                        form=FORM()\n                        for i in range(upload_nr):\n                            form.append(DIV(INPUT(_type=\'file\', _name=\'file_%i\' % i), \n                                            INPUT(_type=\'text\', _name=\'title_%i\' % i))\n                            )\n                        form.append(INPUT(_type=\'submit\', _value=T(\'submit\')))\n                        if form.accepts(request.vars, session):\n                            import gluon.contenttype as contenttype\n                            _exceptions=[]\n                            _file_tuples=[]\n                            for i in range(upload_nr):\n                                _file,filename,filetitle=None,\'\',\'\'\n                                for v in request.post_vars:\n                                    if v==\'file_%i\' % i:\n                                        try: \n                                            _file=request.post_vars[v].file\n                                            filename=request.post_vars[v].filename\n                                        except Exception, ex: log_wrapped(\'exception\', ex)\n    \n                                    elif v==\'title_%i\' % i:\n                                        filetitle=request.post_vars[v]\n    \n                                if _file:\n                                    if not filetitle:\n                                        if filename.find(\'\\\\\')>0: f_n_s=filename.split(\'\\\\\')\n                                        else: f_n_s=filename.split(\'/\')\n                                        filetitle=f_n_s[len(f_n_s)-1]\n                                    _file_tuples.append((_file, filename, filetitle))\n    \n                            for i in range(len(_file_tuples)):\n                                try:\n                                    photo = picasa_manager.client.InsertPhotoSimple(album_url, _file_tuples[i][2],\n                                                                    \'Uploaded using the API\', _file_tuples[i][0], \n                                                                    content_type=contenttype.contenttype(_file_tuples[i][1]))\n                                except Exception, ex:\n                                    _exceptions.append(ex)\n                                    \n                            if len(_exceptions)>0:\n                                response.flash=T(\'There were %i errors during the upload(s): %s\' % (len(_exceptions), str(_exceptions)))\n                                log_wrapped(\'exceptions\', str(_exceptions))\n                            else:\n                                redirect(URL(r=request, f=\'picasa\', args=[\'album\', album_id]))\n        \n                        return dict(nake=None, area=area, form=form, item=item)\n    \n                    elif area == \'edit\':\n                        photo_id, album_id=request.args[2], request.args[3]\n                        photo=picasa_manager.get_album_photo_by_id(\n                                            album_id, photo_id, \n                                            username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                            raw_feed=True\n                                            )\n                        picasa_manager.initialize_photo_metadata(photo)\n        \n                        form=FORM(\n                                DIV(LABEL(T(\'title\')), INPUT(_type=\'text\', _name=\'title\', _value=photo.title.text)),\n                                DIV(LABEL(T(\'summary\')), TEXTAREA(_name=\'summary\', value=photo.summary.text)),\n                                DIV(LABEL(T(\'keywords\')), INPUT(_type=\'text\', _name=\'keywords\', _value=photo.media.keywords.text)),\n                                DIV(LABEL(XML(\'&nbsp;\')), INPUT(_type=\'submit\', _value=T(\'submit\')))\n                            )\n                        if form.accepts(request.vars, session):\n                            try:\n                                photo.title.text = request.vars.title\n                                photo.summary.text = request.vars.summary\n                                photo.media.keywords.text = request.vars.keywords\n                                updated_photo = picasa_manager.client.UpdatePhotoMetadata(photo)\n                                \n                                session.flash = T(\'Photo successfully updated\')\n                                redirect(URL(r=request, args=[\'edit\', \'album\', album_id]))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n    \n                        return dict(nake=None, area=area, form=form, item=item, photo=photo)\n        \n                    elif area == \'delete\':                        \n                        photo_id, album_id=request.args[2], request.args[3]\n                        photo=picasa_manager.get_album_photo_by_id(\n                                            album_id, photo_id, \n                                            username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                            raw_feed=True\n                                            )\n                        form=FORM(\n                                DIV(LABEL(T(\'title\')), INPUT(_type=\'text\', _name=\'title\', _value=photo.title.text)),\n                                DIV(LABEL(T(\'summary\')), TEXTAREA(_name=\'summary\', value=photo.summary.text)),\n                                DIV(LABEL(T(\'keywords\')), INPUT(_type=\'text\', _name=\'keywords\', _value=photo.media.keywords.text)),\n                                DIV(LABEL(XML(\'&nbsp;\')), INPUT(_type=\'submit\', _value=T(\'delete\')))\n                            )\n                        if form.accepts(request.vars, session):\n                            try:\n                                picasa_manager.client.Delete(photo)\n                                session.flash = T(\'Photo deleted\')\n                                redirect(URL(r=request, args=[\'edit\', \'album\', album_id]))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n    \n                        return dict(nake=None, area=area, form=form, item=item, photo=photo)\n    \n    \n            elif area == \'albums\':\n                albums_feed=picasa_manager.get_albums_feed()\n                \n                form=DIV()\n                albums=TABLE(TR(TH(T(\'title\')), TH(T(\'nr of pictures\')), TH(), TH(), TH(), TH()))\n                for entry in albums_feed:\n                    albums.append(TR(\n                                        TD(entry.title.text),\n                                        TD(entry.numphotos.text),\n                                        TD(A(T(\'view\'), _href=URL(r=request, args=[\'album\', entry.gphoto_id.text]))), \n                                        TD( A(T(\'edit\'), _href=URL(r=request, args=[\'edit\', \'album\', entry.gphoto_id.text]))),\n                                        TD( A(T(\'delete\'), _href=URL(r=request, args=[\'delete\', \'album\', entry.gphoto_id.text]))),\n                                        TD( A(T(\'upload to\'), _href=URL(r=request, args=[\'upload\', \'picture\',  entry.gphoto_id.text]))),\n                                    )\n                            )\n                form.append(A(T(\'add\'), _class=\'display-block width100pc text-alignr\', _href=URL(r=request, args=[\'add\', \'album\'])))\n                form.append(albums)\n                return dict(nake=None, area=area, form=form, item=None)\n    \n    ## PUBLIC SECTION\n        if area == \'gallery\':\n            recent=picasa_manager.get_recent_photos()\n            gallery=picasa_manager.get_album_gallery()\n            return dict(nake=None, area=area, item=None, recent=recent, gallery=gallery)\n            \n        if area == \'album\':\n            album_id=request.args[1]\n            album=picasa_manager.get_album_photos(album_id)\n            return dict(nake=None, area=area, item=None, album=album, album_id=album_id)\n            \n        elif area == \'slideshow\':\n            album_id=request.args[1]\n            album=picasa_manager.get_album_photos(album_id)\n            if not session.current_photo or int(session.current_photo)>len(album)-1:\n                session.current_photo=0\n            photo=album[int(session.current_photo)]\n            session.current_photo+=1\n            response.refresh=\'<meta http-equiv="refresh" content="%i;%s" />\' % (2, URL(r=request, args=[\'slideshow\', album_id]))\n            return dict(nake=True, area=area, item=None, photo=photo, album_id=album_id)\n    \n    except Exception, ex:\n        log_wrapped(\'Exception\', ex)\n        if str(ex).lower().find(\'unknown user\')>=0:\n            session.flash = T(\'User is unknown by the Google Photos (Picasa) Service. User must be registered there: %(picasa_link)s\', \n                                dict(picasa_link=\'http://picasaweb.google.com\'))\n        if str(ex).lower().find(\'captcha required\')>=0:\n            session.flash = T(\'User credentials are unknown to the Google Photos (Picasa) Service. User should be modified by an administrator, in service setup.\')\n        redirect(URL(r=request, c=\'default\', f=\'error\'))\n\ndef social():\n    area = \'twitter\'\n    sub_area=None\n    _items=[]\n    if request.args[0] == \'twitter\' or request.args[0] == \'twitter.json\':\n        exec(\'from applications.%s.modules import twitter\' % request.application)\n        try:\n            if len(request.args)>1:\n                sub_area = request.args[1]\n                if sub_area == \'user\':\n                    api_config=db(db.app_config.id>0).select()[0].TWITTER_API\n                    _username=api_config[0]\n                    twitter = twitter.Manager(_username)\n                    _items = twitter.get_user_tweets()\n                    if type(_items)==DictType and \'error\' in _items:\n                        _items=[_items[\'request\'], _items[\'error\']]\n        except Exception, ex:\n            log_wrapped(\'Error\', ex)\n            if str(ex).lower().find(str(\'No JSON object could be decoded\').lower())>=0:\n                response.flash=T(\'No tweets for username and/or hash found (error: %(err)s)\', dict(err=str(ex)))\n            else:\n                response.flash=T(\'Error occured: : %(err)s\', dict(err=str(ex)))\n\n    return dict(nake=False, area=area, sub_area=sub_area, items=_items)\n\ndef twitter():\n    api_config=db(db.app_config.id>0).select()[0].TWITTER_API\n    _username = api_config[0]\n    _hashes, _filters = api_config[2], api_config[3]\n    _filter = \'#%s %s\' % (\' \'.join(_filters.split(\',\')), \' #\'.join(_hashes.split(\',\')))\n\n    exec(\'from applications.%s.modules import twitter\' % request.application)\n    twitter = twitter.Manager(_username)\n    _items = twitter.search_tweets(_hashes)\n\n    import gluon.contrib.simplejson as simplejson\n    return simplejson.dumps(_items)\n\ndef blogger():\n    """UTILITIES"""\n    def blogger_languages_get():\n        c = utilities.get_cookie(\'blogger_languages\')\n        if c:\n            return c.value\n        elif session.blogger_languages:\n            return session.blogger_languages\n        else:\n            return T.current_languages\n            \n    def themes_cookie_redirect():\n        if request.vars.blogger_themes:\n            utilities.set_cookie(\'blogger_themes\', request.vars.blogger_themes)\n            session.blogger_themes = request.vars.blogger_themes\n            redirect(URL(r = request, f = \'blogger\', args = [\'themes\', request.vars.blogger_themes]))\n            return True\n        else:\n            return False\n            \n    """FUNCTION OUTPUT"""\n    if (not app_config.BLOGGER_API or not app_config.BLOGGER_BLOGS_THEMES or not app_config.BLOGGER_BLOGS_LANGUAGES\n        or not len(app_config.BLOGGER_API)>0 or not len(app_config.BLOGGER_BLOGS_THEMES)>0 or not len(app_config.BLOGGER_BLOGS_LANGUAGES)>0):\n        response.flash = T(\'Blogger api credentials and config data not set in setup.\')\n        return dict(area = \'\', nake = False)\n\n    else:\n        _Blogger = Blogger(app_config.BLOGGER_API, app_config.BLOGGER_BLOGS_THEMES, \n                          app_config.BLOGGER_BLOGS_LANGUAGES, posts = blogger_blogs_data())\n        area = request.args[0]\n        \n        if area in [\'themes_choice\']:\n            import pdb\n            pdb.set_trace()\n            \n            themes = []\n            session.blogger_languages = blogger_languages_get()\n            blogger_languages = session.blogger_languages.split(\',\')\n            \n            form = FORM()\n            checked = {}\n            for lang in T.current_languages:\n                checked[lang] = lang in blogger_languages\n            form.append(gluon.widget.Checkboxes(\'blogger_languages\', T.current_languages, checked=checked[lang], _checked=checked[lang]))\n            form.append(INPUT(_type="submit", _value=T(\'Submit\')))            \n            if form.accepts(request.vars, session):\n                log_wrapped(\'form.vars.blogger_languages\', form.vars.blogger_languages)\n            \n            if not themes_cookies_redirect():\n                themes = [(_themes, \'/%s/media/blogger/themes/%s\' % (this_app, \'-\'.join(_themes))) for _themes in _Blogger.themes_by_languages(blogger_languages)]\n            return dict(area = area, nake = False, themes = themes)\n            \n        elif area in [\'themes\']:\n            form = FORM(_class="right width50pc")\n            lang_id_prefix = "languages_"\n            for lang in T.current_languages:\n                form.append(INPUT(_type=\'checkbox\', _name="languages", id=lang_id_prefix+lang, \n                            _checked=lang in session.blogger_languages if session.blogger_languages else False,\n                            _class="left"))\n            form.append(INPUT(_type=\'submit\', _value=T(\'Submit\'), _class="left"))\n            form.append(DIV(_class="clear"))\n            \n            if form.accepts(request.vars, session):\n                langs = []\n                for lang in T.current_languages:\n                    # exec "val = request.vars.%s" % (lang_id_prefix+lang)\n                    if val.lower() == "on":\n                      langs.append(val)\n                if len(langs)==0:\n                    response.flash = T(\'At least one language required.\')\n                else:\n                    utilities.set_cookie(\'blogger_languages\', \',\'.join(langs))\n                    session.flash = T(\'Language(s) set.\')\n                    redirect(URL(r = request))\n                \n            blogger_languages_set()\n            \n            tags = []\n            if len(request.args)<2:\n                if not session.blogger_themes:\n                    if request.cookies.has_key(\'blogger_themes\'):\n                        session.blogger_themes = request.cookies[\'blogger_themes\'].value\n                        \n                    elif not themes_cookie_redirect():\n                        redirect(URL(r = request, f = \'blogger\', args = [\'themes_choice\']))\n            else:\n                session.blogger_themes = request.args[1]\n                \n            if session.blogger_themes:\n                tags = [{_themes : (_tags, \'/%s/media/blogger/tags/%s\' % (this_app, \'-\'.join(_tags)))} \n                                            for _tags in _Blogger.tags_by_themes(session.blogger_themes.split(\'-\'))]\n            return dict(area = area, nake = False, tags = tags)\n            \n        elif area in [\'tags\']:\n            posts = []\n            if len(request.args)<2:\n                if not session.blogger_tags:\n                    redirect(URL(r = request, f = \'blogger\', args = [\'tags\']))\n            else:\n                session.blogger_tags = request.args[1]\n                \n            if session.blogger_tags:\n                posts = [{_tags : _post} \n                            for _post in _Blogger.posts_by_tags(\n                                                        session.blogger_tags.split(\'-\'), \n                                                        session.blogger_themes.split(\'-\'))]\n            return dict(area = area, nake = False, posts = posts)\n\ndef blogger_blogs_data():\n    _Blogger = Blogger(app_config.BLOGGER_API, app_config.BLOGGER_BLOGS_THEMES, \n                      app_config.BLOGGER_BLOGS_LANGUAGES)\n    _Blogger.blogs\n    _Blogger.blogs_data\n    t = cache.ram(\'blogger_blogs_data\', _Blogger.blogs_data, time_expire=60*60)\n    return t\n\nresponse._vars=response._caller(blogger)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.NameError object at 0xa293b6c>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.NameError object at 0xa293b6c>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.NameError object at 0xa293b6c>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.NameError object at 0xa293b6c>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.NameError object at 0xa293b6c>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.NameError object at 0xa293b6c>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.NameError object at 0xa293b6c>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.NameError object at 0xa293b6c>"
p26
sS'args'
p27
S'("global name \'blogger_service\' is not defined",)'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.NameError object at 0xa293b6c>"
p30
sS'__class__'
p31
S"<type 'exceptions.NameError'>"
p32
sS'__delattr__'
p33
S"<method-wrapper '__delattr__' of exceptions.NameError object at 0xa293b6c>"
p34
sS'__repr__'
p35
S"<method-wrapper '__repr__' of exceptions.NameError object at 0xa293b6c>"
p36
sS'__dict__'
p37
S'{}'
p38
sS'__doc__'
p39
S"'Name not found globally.'"
p40
sS'__init__'
p41
S"<method-wrapper '__init__' of exceptions.NameError object at 0xa293b6c>"
p42
sS'__new__'
p43
S'<built-in method __new__ of type object at 0x8239980>'
p44
ssS'evalue'
p45
S"global name 'blogger_service' is not defined"
p46
sS'request'
p47
(dp48
S'function'
p49
S"'blogger'"
p50
sS'body'
p51
S'<cStringIO.StringO object at 0x9d44f60>'
p52
sS'wsgi'
p53
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p54
sS'extension'
p55
S"'html'"
p56
sS'vars'
p57
S'<Storage {}>'
p58
sS'cid'
p59
S'None'
p60
sS'url'
p61
S'<gluon.html.XML object at 0x9d4430c>'
p62
sS'raw_extension'
p63
S'None'
p64
sg27
S"['themes_choice']"
p65
sS'controller'
p66
S"'media'"
p67
sS'cookies'
p68
S"<SimpleCookie: session_id_admin='127.0.0.1-b9035...0269e6a-c816-4c2a-bfa7-b84e9f72fe25' theme='cms'>"
p69
sS'application'
p70
S"'cms'"
p71
sS'ajax'
p72
S'False'
p73
sS'client'
p74
S"'127.0.0.1'"
p75
sS'env'
p76
S"<Storage {'wsgi_multithread': True, 'http_accept...nput': <socket._fileobject object at 0xa1444c4>}>"
p77
sS'raw_args'
p78
S"'themes_choice'"
p79
sS'get_vars'
p80
S'<Storage {}>'
p81
sS'folder'
p82
S"'/home/herve/development/workspaces/molhokwai.net/web/applications/cms/'"
p83
sS'now'
p84
S'datetime.datetime(2011, 2, 28, 11, 44, 0, 612726)'
p85
sS'post_vars'
p86
S'<Storage {}>'
p87
ssS'frames'
p88
(lp89
(dp90
S'file'
p91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py'
p92
sS'dump'
p93
(dp94
S'environment'
p95
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x9e752cc>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'Blogger': <class applications.cms.modules.blogger.Blogger at 0x9b34f8c>, 'BooleanType': <type 'bool'>, 'BufferType': <type 'buffer'>, ...}"
p96
sS'ccode'
p97
S'<code object <module> at 0xa149188, file "/home/...b/applications/cms/controllers/media.py", line 1>'
p98
ssS'lnum'
p99
I188
sS'lines'
p100
(dp101
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p102
sI183
S'        if type(code) == types.CodeType:'
p103
sI184
S'            ccode = code'
p104
sI185
S'        else:'
p105
sI186
S'            ccode = compile2(code,layer)'
p106
sI187
S''
sI188
S'        exec ccode in environment'
p107
sI189
S'    except HTTP:'
p108
sI190
S'        raise'
p109
sI191
S'    except Exception:'
p110
ssS'call'
p111
S"(code='from types import *\\n\\n###########################...turn t\\n\\nresponse._vars=response._caller(blogger)\\n', environment={'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x9e752cc>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'Blogger': <class applications.cms.modules.blogger.Blogger at 0x9b34f8c>, 'BooleanType': <type 'bool'>, 'BufferType': <type 'buffer'>, ...}, layer='/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py')"
p112
sS'func'
p113
S'restricted'
p114
sa(dp115
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py'
p116
sg93
(dp117
sg99
I454
sg100
(dp118
I448
S'                      app_config.BLOGGER_BLOGS_LANGUAGES)'
p119
sI449
S'    _Blogger.blogs'
p120
sI450
S'    _Blogger.blogs_data'
p121
sI451
S"    t = cache.ram('blogger_blogs_data', _Blogger.blogs_data, time_expire=60*60)"
p122
sI452
S'    return t'
p123
sI443
S"                                                        session.blogger_themes.split('-'))]"
p124
sI444
S'            return dict(area = area, nake = False, posts = posts)'
p125
sI445
S''
sI446
S'def blogger_blogs_data():'
p126
sI447
S'    _Blogger = Blogger(app_config.BLOGGER_API, app_config.BLOGGER_BLOGS_THEMES,'
p127
ssg111
S'()'
p128
sg113
S'<module>'
p129
sa(dp130
g91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/globals.py'
p131
sg93
(dp132
S'self'
p133
S'undefined'
p134
sS'f'
S'<function blogger at 0x9e6c924>'
p135
ssg99
I95
sg100
(dp136
I96
S'        self._view_environment = None'
p137
sI97
S'        self._custom_commit = None'
p138
sI98
S'        self._custom_rollback = None'
p139
sI99
S''
sI90
S"        self.flash = ''           # used by the default view layout"
p140
sI91
S'        self.meta = Storage()     # used by web2py_ajax.html'
p141
sI92
S'        self.menu = []            # used by the default view layout'
p142
sI93
S'        self.files = []           # used by web2py_ajax.html'
p143
sI94
S'        self._vars = None'
p144
sI95
S'        self._caller = lambda f: f()'
p145
ssg111
S'(f=<function blogger at 0x9e6c924>)'
p146
sg113
S'<lambda>'
p147
sa(dp148
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py'
p149
sg93
(dp150
S'global app_config'
p151
S'<Row {\'APP_METAS\': ["\'a\' cm/dms", "molhokwai.net...elete_record\': <function <lambda> at 0xa144144>}>'
p152
sS'global blogger_blogs_data'
p153
S'<function blogger_blogs_data at 0x9e6c6bc>'
p154
sS'app_config.BLOGGER_BLOGS_LANGUAGES'
p155
S"['en:molhokwai,ideasprojects-en', 'fr:molhokwai']"
p156
sS'posts'
p157
g134
ssg99
I366
sg100
(dp158
I361
S"        response.flash = T('Blogger api credentials and config data not set in setup.')"
p159
sI362
S"        return dict(area = '', nake = False)"
p160
sI363
S''
sI364
S'    else:'
p161
sI365
S'        _Blogger = Blogger(app_config.BLOGGER_API, app_config.BLOGGER_BLOGS_THEMES,'
p162
sI366
S'                          app_config.BLOGGER_BLOGS_LANGUAGES, posts = blogger_blogs_data())'
p163
sI367
S'        area = request.args[0]'
p164
sI368
S''
sI369
S"        if area in ['themes_choice']:"
p165
sI370
S'            import pdb'
p166
ssg111
S'()'
p167
sg113
S'blogger'
p168
sa(dp169
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py'
p170
sg93
(dp171
S'global app_config'
p172
S'<Row {\'APP_METAS\': ["\'a\' cm/dms", "molhokwai.net...elete_record\': <function <lambda> at 0xa144144>}>'
p173
sS'app_config.BLOGGER_BLOGS_LANGUAGES'
p174
S"['en:molhokwai,ideasprojects-en', 'fr:molhokwai']"
p175
ssg99
I448
sg100
(dp176
I448
S'                      app_config.BLOGGER_BLOGS_LANGUAGES)'
p177
sI449
S'    _Blogger.blogs'
p178
sI450
S'    _Blogger.blogs_data'
p179
sI451
S"    t = cache.ram('blogger_blogs_data', _Blogger.blogs_data, time_expire=60*60)"
p180
sI452
S'    return t'
p181
sI443
S"                                                        session.blogger_themes.split('-'))]"
p182
sI444
S'            return dict(area = area, nake = False, posts = posts)'
p183
sI445
S''
sI446
S'def blogger_blogs_data():'
p184
sI447
S'    _Blogger = Blogger(app_config.BLOGGER_API, app_config.BLOGGER_BLOGS_THEMES,'
p185
ssg111
S'()'
p186
sg113
S'blogger_blogs_data'
p187
sa(dp188
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/modules/blogger.py'
p189
sg93
(dp190
S'self.service'
p191
S'None'
p192
sS'self'
p193
S'<applications.cms.modules.blogger.Blogger instance at 0xa2935ac>'
p194
sS'blogger_service'
p195
g134
ssg99
I37
sg100
(dp196
I32
S''
sI33
S''
sI34
S'    def blogger_service(self, username=None, password=None, source=None):'
p197
sI35
S'        if username is None: username = self.config_api[0]'
p198
sI36
S'        if password is None: password = self.config_api[1]'
p199
sI37
S'        if source is None: source = self.config_api[2]'
p200
sI38
S''
sI39
S'        _service = service.GDataService(username, password)'
p201
sI40
S'        _service.source = source'
p202
sI41
S"        _service.service = 'blogger'"
p203
ssg111
S"(self=<applications.cms.modules.blogger.Blogger instance at 0xa2935ac>, config_api=['molhokwai@gmail.com', 'jamiroquai8', 'molhokwai.net'], config_themes=['prose_poetry:molhokwai', 'development:ideasprojects-en'], config_blogs_languages=['en:molhokwai,ideasprojects-en', 'fr:molhokwai'], blogs=None)"
p204
sg113
g41
sasS'pyver'
p205
S'Python 2.5.1: /usr/local/bin/python2.5'
p206
sS'session'
p207
(dp208
S'user_authorization_done'
p209
S'True'
p210
sS'_formkey[app_config_1]'
p211
S"'5264f03a-959a-46c9-93ae-05264fbf4f46'"
p212
sS'flash'
p213
S'None'
p214
sS'auth'
p215
S"<Storage {'expiration': 3600, 'user': <Storage {...1, 2, 28, 11, 44, 0, 612726), 'remember': False}>"
p216
sS'authorized'
p217
g210
sS'_language'
p218
S"'en'"
p219
ssS'etype'
p220
S"<type 'exceptions.NameError'>"
p221
sS'date'
p222
S'Mon Feb 28 11:44:00 2011'
p223
sS'response'
p224
(dp225
S'_vars'
p226
S'None'
p227
sg68
S"<SimpleCookie: session_id_cms='127.0.0.1-a0269e6a-c816-4c2a-bfa7-b84e9f72fe25'>"
p228
sS'links'
p229
S"[['web2py', 'http://www.web2py.com', 1], ['Python', 'http://www.python.org', 2], ['DePaul CTI', 'http://www.cs.depaul.edu', 3], ['DePaul University', 'http://www.depaul.edu', 5], ['downloads', '/a/default/page/32', 15], ['media / picasa / gallery', '/a/media/picasa/gallery', 16], ['manage media / manage picasa albums / manage photos', '/a/media/picasa/albums', 17], ['setup, application initialization', '/a/setup', 18], ['twitter', '/a/media/social/twitter', 19]]"
p230
sS'posts'
p231
S'<gluon.dal.Rows object at 0xa4179ec>'
p232
sS'themes'
p233
S"['0', '1', 'cms', 'pypress', 'test#:#0#:#http://localhost/css/base.css#:#molhokwai@gmail.com', 'test1#:#0#:#http://localhost/css/base1.css#:#herve.mayou@gmail.com']"
p234
sS'theme_stylesheet'
p235
S'None'
p236
sS'meta'
p237
S'<Storage {}>'
p238
sS'_view_environment'
p239
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x9e752cc>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p240
sS'keywords'
p241
S"'blog, weblog, journal, web, log, web2py, pypress...straight-forward, direct, programming, programmer'"
p242
sS'files'
p243
S'[]'
p244
sS'last_posts'
p245
S"[['nn : bayesian classifer', datetime.datetime(2011, 2, 18, 12, 7, 56), <gluon.html.XML object at 0xa088a2c>], ['cms_home', datetime.datetime(2011, 2, 6, 13, 1, 36), <gluon.html.XML object at 0xa08892c>], ['cms_help', datetime.datetime(2011, 2, 6, 13, 1, 36), <gluon.html.XML object at 0xa2b9b6c>], ['test', datetime.datetime(2011, 1, 14, 14, 59, 41), <gluon.html.XML object at 0xa2b9cac>], ['acknowledgements', datetime.datetime(2011, 1, 2, 10, 41, 29), <gluon.html.XML object at 0xa2b90ac>]]"
p246
sS'title'
p247
S'"molhokwai.net - \'a\' cm/dms"'
p248
sS'home_page'
p249
S"<Row {'post_text_TCode': None, 'post_attributes_...elete_record': <function <lambda> at 0x9d5064c>}>"
p250
sS'menu'
p251
S"[['home', False, '/cms/default/page/16'], ['community', False, '/cms/default/page/18']]"
p252
sS'flash'
p253
S"''"
p254
sS'theme'
p255
S"'cms'"
p256
sS'session_id_name'
p257
S"'session_id_cms'"
p258
sS'_custom_commit'
p259
S'None'
p260
sS'session_filename'
p261
S"'/home/herve/development/workspaces/molhokwai.net...ns/127.0.0.1-a0269e6a-c816-4c2a-bfa7-b84e9f72fe25'"
p262
sg51
S'<cStringIO.StringO object at 0x9d44580>'
p263
sS'description'
p264
S'"molhokwai.net - \'a\' cm/dms, lightweight, simple, straight & direct"'
p265
sS'session_file'
p266
S"<open file '/home/herve/development/workspaces/m...4c2a-bfa7-b84e9f72fe25', mode 'rb+' at 0xa148650>"
p267
sS'_caller'
p268
S'<function <lambda> at 0xa1445a4>'
p269
sS'_custom_rollback'
p270
S'None'
p271
sS'pages'
p272
S"[['beliefs', False, '/cms/default/page/15'], ['home', False, '/cms/default/page/16'], ['community', False, '/cms/default/page/18'], ['SMS', False, '/cms/default/page/21'], ['', False, '/cms/default/page/23'], ['help', False, '/cms/default/page/27'], ['themes', False, '/cms/default/page/35'], ['acknowledgements', False, '/cms/default/page/37'], ['cms_home', False, '/cms/default/page/39'], ['cms_help', False, '/cms/default/page/40'], ['nn : bayesian classifer', False, '/cms/default/page/41']]"
p273
sS'categories'
p274
S"[['misc', 2, '/cms/default/category/misc']]"
p275
sS'name'
p276
S'"\'a\' cm/dms"'
p277
sS'auth_users'
p278
S'<gluon.dal.Rows object at 0xa417e0c>'
p279
sS'help_page'
p280
S"<Row {'post_text_TCode': None, 'post_attributes_...elete_record': <function <lambda> at 0x9d5010c>}>"
p281
sS'session_id'
p282
S"'127.0.0.1-a0269e6a-c816-4c2a-bfa7-b84e9f72fe25'"
p283
sS'headers'
p284
S"<Storage {'Expires': 'Mon, 28 Feb 2011 10:44:00 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p285
sS'status'
p286
S'200'
p287
sS'postprocessing'
p288
S'[]'
p289
sS'base_theme'
p290
S'None'
p291
sS'view'
p292
S"'media/blogger.html'"
p293
ssS'locals'
p294
(dp295
S'config_api'
p296
S"['molhokwai@gmail.com', 'jamiroquai8', 'molhokwai.net']"
p297
sS'blogs'
p298
S'None'
p299
sS'config_themes'
p300
S"['prose_poetry:molhokwai', 'development:ideasprojects-en']"
p301
sS'config_blogs_languages'
p302
S"['en:molhokwai,ideasprojects-en', 'fr:molhokwai']"
p303
sS'self'
p304
S'<applications.cms.modules.blogger.Blogger instance at 0xa2935ac>'
p305
sssS'traceback'
p306
S'Traceback (most recent call last):\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py", line 454, in <module>\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py", line 366, in blogger\n    app_config.BLOGGER_BLOGS_LANGUAGES, posts = blogger_blogs_data())\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/cms/controllers/media.py", line 448, in blogger_blogs_data\n    app_config.BLOGGER_BLOGS_LANGUAGES)\n  File "applications/a/modules/blogger.py", line 37, in __init__\n    if source is None: source = self.config_api[2]\nNameError: global name \'blogger_service\' is not defined\n'
p307
s.