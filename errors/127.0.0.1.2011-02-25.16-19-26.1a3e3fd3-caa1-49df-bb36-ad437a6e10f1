(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p4
sS'code'
p5
S'###################################\n## CONTROLLER INITIALIZATION\n###################################\nif True:\n    exec(\'from applications.%s.modules import common\' % this_app)\n    app_objects=Struct(**{\'details\':app_details,\'config\':app_config,\'log_wrapped\':log_wrapped,\'utilities\':utilities})\n    page_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_objects)\n\ntry:pass\nexcept Exception, ex:\n    log_wrapped(\'Er\', ex)\n\n\n###################################\n## CONTROLLER FUNCTIONS\n###################################\n\n# The main page\n# Shows the home page if one created (see \'home_page\' function page with title)\n# Otherwise, defaults to showing the first 10 posts\ndef index():\n    if len(request.args)==0:\n        if response.home_page:\n            redirect(URL(r=request, c=\'default\', f=\'page\', args=[response.home_page.id]))\n        else:\n            redirect(URL(r=request, c=\'setup\'))\n    else:\n      if a_convert.to_int(request.args[0]):\n          return dict(posts = db(db.posts.id == int(request.args[0])).select())\n      else:\n          posts=db(db.posts.post_title == request.args[0]).select()\n          if not posts:\n              posts = filter(lambda x: x.post_title.lower().find(request.args[0].lower())>0,response.posts)\n          return dict(posts = posts)          \n      \n\n# The post page\n# Shows the entire post, the comments, and the comment form\ndef post():\n    #try: \n    post_id = int(request.args[0])\n    post = db(db.posts.id == post_id).select()[0]\n    \n    if post and post.auth_requires_login and not auth.user:\n        redirect(URL(r = request, f = \'user\', args = [\'login\']))\n\n    comments = db(db.comments.post_id == post_id).select(db.comments.ALL)\n    comment_count = len(db(db.comments.post_id == post_id).select(db.comments.ALL))\n    db.comments.post_id.default = post_id\n    comment_form = SQLFORM(db.comments, fields = [\'comment_author\', \'comment_author_email\', \'comment_author_website\', \'comment_text\'], labels = comment_labels)\n        \n    if comment_form.accepts(request.vars, session):\n        session.flash = T("Comment added.")\n        redirect(URL(r = request,f = \'post/%i\' % post_id ))\n\n    return dict(post = post, comments = comments, comment_form = comment_form, comment_count = comment_count)\n    #except: \n    #    redirect(URL(r = request,f = \'index\'))\n\n# The page page\n# Shows the entire page. Does not show comments or the comment form\ndef page():\n    try:\n        if len(request.args)>0:\n            post=\'\'\n            if a_convert.to_int(request.args[0]):\n                post = db(db.posts.id == int(request.args[0])).select()[0]\n            else:\n                post = db(db.posts.post_title == request.args[0]).select()\n                if not post:\n                    pg = filter(lambda x: x[0].lower().find(request.args[0].lower())>=0, response.pages)\n                    if not pg:\n                      # fix for _ replacing space in url\n                      pg = filter(lambda x: x[0].lower().find(request.args[0].replace(\'_\', \' \').lower())>=0, response.pages)\n                    if pg and len(pg)>0: pg = pg[0]\n                    post = db(db.posts.id == int(pg[2].replace(\'/%s/default/page/\' % this_app, \'\'))).select()\n                if post: post = post[0]\n                \n            if post and post.auth_requires_login and not auth.user:\n                redirect(URL(r = request, f = \'user\', args = [\'login\']))\n            \n            nake=(request.args[len(request.args)-1]==\'nake\'\n                 or post.post_text.find(\'<!-- nake page -->\')>=0)\n        \n            return dict(post = post, nake  = nake)\n        else:\n            redirect(URL(r = request,f = \'index\'))\n            \n    except Exception, ex: \n        log_wrapped(\'Error\', str(ex))\n        session.flash=T("(Caught) Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n# The pages page\n# Shows links to all pages\ndef pages():\n    return dict(manage_title=T("pages"))\n\n# The category page\n# Shows all the posts in the requested category\ndef category():\n    def fp(p): return p.post_type==\'post\'\n    try:\n        cat_name = request.args[0]\n        cat = db(db.categories.category_name == cat_name\n                    ).select(db.categories.ALL)[0]\n        posts=[]\n        try:\n            posts = db((db.posts.post_type == \'post\') &\n                       (db.posts.post_category == cat.id) &\n                        ((db.posts.application == request.application) | \n                        (db.posts.application == None))\n                       ).select(db.posts.ALL) ## , orderby=~db.posts.post_time\n        except Exception, ex:\n            posts = db((db.posts.post_type == \'post\') &\n                       (db.posts.post_category == cat.id)\n                       ).select(db.posts.ALL) ## , orderby=~db.posts.post_time\n        filter(fp,posts)\n\n        response.sidebar_note = T("You are currently browsing the archives for the %(cat_name)s category.",dict(cat_name=cat_name))\n        return dict(posts = posts)\n    except:\n        redirect(URL(r = request,f = \'index\'))\n\n@auth.requires_login()\ndef add():\n    try:\n        area = request.args[0]\n\n        if area == "post":\n            db.posts.post_type.default = \'post\'\n            page_form = SQLFORM(db.posts, fields = [\'post_title\', \'post_text\', \n                                                    \'post_category\', \'is_translated\', \'auth_requires_login\'], \n                                                    labels = post_labels)\n            page_form.append(INPUT(_type=\'checkbox\', \n                                    _name=\'post_attributes_content_is_original\', \n                                    _id=\'post_attributes_content_is_original\', value=\'\'))\n            page_title = T("Add Post")\n            \n            if page_form.accepts(request.vars, session):\n                tcode="post_id_"+str(page_form.vars.id)\n                from gluon.contrib import simplejson\n                _json=simplejson.loads(request.vars.post_attributes_json)\n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                pg=db(db.posts.id==page_form.vars.id).update(\n                                                post_text_TCode=tcode,\n                                                post_attributes_json=simplejson.dumps(_json))\n                ## FEATURE REQUEST: to add the translation code if not existing\n                T(tcode)\n                session.flash = T("Post added.")\n                redirect(URL(r = request,f = \'post/%i\' % page_form.vars.id))\n        \n        elif area == "page":\n            db.posts.post_type.default = \'page\'\n            page_form = SQLFORM(db.posts, fields = [\'post_title\', \'post_text\', \n                                                    \'show_in_menu\', \'is_translated\'], \n                                                    labels = post_labels)\n            page_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                    _id=\'post_attributes_content_is_original\', value=\'\'))\n            page_title = T("Add Page")\n            \n            if page_form.accepts(request.vars, session):\n                tcode="page_id_"+str(page_form.vars.id)\n                from gluon.contrib import simplejson\n                _json=simplejson.loads(request.vars.post_attributes_json)\n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                pg=db(db.posts.id==page_form.vars.id).update(\n                                                post_text_TCode=tcode,\n                                                post_attributes_json=simplejson.dumps(_json)\n                                            )\n                ## FEATURE REQUEST: to add the translation code if not existing\n                T(tcode)\n                session.flash = T("Page added.")\n                redirect(URL(r = request,f = \'page/%i\' % page_form.vars.id))          \n                \n        else:\n            redirect(URL(r = request,f = \'index\'))\n            \n        return dict(page_title = page_title, page_form = page_form)\n    except Exception, ex:\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n@auth.requires_login()\ndef edit():\n    this_item=None\n    area=None\n    id=None\n    # p_a_c_i_o_val : page attr. content is orginal value\n    p_a_c_i_o_val=None\n    try:\n        area = request.args[0]\n        id = int(request.args[1])\n        this_item = db(db.posts.id == id).select()[0]\n    except Exception, ex:\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n    try:\n        from gluon.contrib import simplejson\n        _json=simplejson.loads(this_item.post_attributes_json)\n        p_a_c_i_o_val=\'on\' if _json[\'content_is\'][\'original\'] else \'\'\n    except Exception, ex:\n        session.flash=T("(Minor) Error occured: %(err)s ", dict(err=str(ex)))\n    \n    if area == \'post\':\n        edit_form = SQLFORM(db.posts, this_item, fields = [\'post_title\', \'post_text\', \'post_text_TCode\', \n                                                            \'post_category\', \'is_translated\', \'auth_requires_login\'], \n                                                            deletable=True, labels = post_labels)\n        edit_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                _id=\'post_attributes_content_is_original\', value=p_a_c_i_o_val))\n        edit_title = T("Edit Post")\n    \n        if edit_form.accepts(request.vars, session):\n            if request.vars.delete_this_record==\'on\':\n                session.flash = T("Post deleted.")\n                redirect(URL(r = request,f = \'index/posts\'))\n            else:    \n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                db(db.posts.id==id).update(post_attributes_json=simplejson.dumps(_json))\n                session.flash = T("Post updated.")\n                redirect(URL(r = request,f = \'post/%s\' %id))\n\n    elif area == \'page\':\n        this_item = db(db.posts.id == id).select()[0]\n        edit_form = SQLFORM(db.posts, this_item, fields = [\'post_title\', \'post_text\', \'post_text_TCode\', \n                                                            \'is_translated\', \'show_in_menu\'], \n                                                            deletable=True, labels = post_labels)\n        edit_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                 _id=\'post_attributes_content_is_original\', value=p_a_c_i_o_val))\n        edit_title = T("Edit Page")\n    \n        if edit_form.accepts(request.vars, session):\n            if request.vars.delete_this_record==\'on\':\n                session.flash = T("Page deleted.")\n                redirect(URL(r = request,f = \'pages\'))\n            else:\n                try:\n                    _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                    db(db.posts.id==id).update(post_attributes_json=simplejson.dumps(_json))\n                    session.flash = T("Page updated.")\n                except Exception, ex:\n                    session.flash=T("(Minor) Error occured: %(err)s ", dict(err=str(ex)))\n                finally:\n                    redirect(URL(r = request,f = \'page/%s\' %id))\n                        \n    else:\n        redirect(URL(r = request,f = \'index\'))\n    \n    return dict(edit_form = edit_form, edit_title = edit_title, post=this_item)\n\n        \n@auth.requires_login()\ndef manage():\n\n    area = None\n    if len(request.args)>0:\n        area = request.args[0]\n    else:\n        area = \'post\'\n    \n    try: command = request.args[1]\n    except: command = ""\n        \n    if area == \'page\':\n        redirect(URL(r = request, f=\'pages\'))\n    \n    elif area == \'post\':\n        rows = db(db.posts.post_type == \'post\').select(db.posts.ALL)\n        manage_title = T(\'Manage Posts\')\n\n        if command == \'add\':\n            edit_form = SQLFORM(db.posts, labels = post_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Post added")\n                redirect(URL(r = request, f = \'manage/post\'))\n            else:\n                session.flash = T("Error")\n       \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_post = db(db.posts.id == id).select()[0]\n                edit_form = SQLFORM(db.posts, this_post)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Post updated")\n                    redirect(URL(r = request, f = \'manage\', args=[\'post\']))\n                else:\n                    session.flash=T("(Caught) Error occured")\n                    \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.posts.id == id).delete()\n                session.flash = T("Post deleted")\n                redirect(URL(r = request, f = \'index\'))\n        else:\n            edit_form = \'\'\n\n        return dict(rows = rows, manage_title = manage_title, manage_text=\'\', edit_form = edit_form, area = area)\n    \n    elif area == \'link\':\n        rows = db().select(db.links.ALL)\n        manage_title = T(\'Manage Links\')\n\n        if command == \'add\':\n            edit_form = SQLFORM(db.links, labels = link_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Link added")\n                redirect(URL(r = request, f = \'manage\', args=[\'link\']))\n            else:\n                session.flash=T("(Caught) Error occured")\n       \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_link = db(db.links.id == id).select()[0]\n                edit_form = SQLFORM(db.links, this_link)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Link updated")\n                    redirect(URL(r = request, f = \'manage\', args=[\'link\']))\n                else:\n                    session.flash=T("(Caught) Error occured")\n        \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.links.id == id).delete()\n                session.flash = T("Link deleted")\n                redirect(URL(r = request, f = \'manage/link\'))\n        else:\n            edit_form = \'\'\n            \n        return dict(rows = rows, manage_title = manage_title, manage_text=\'\', edit_form = edit_form, area = area)\n    \n    elif area == \'category\':\n        rows = db().select(db.categories.ALL)\n        manage_title = T(\'Manage Categories\')\n       \n        if command == \'add\':\n            edit_form = SQLFORM(db.categories, labels = cat_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Category added")\n                redirect(URL(r = request, f = \'manage/category\'))\n        \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_cat = db(db.categories.id == id).select()[0]\n                edit_form = SQLFORM(db.categories, this_cat)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Category updated")\n                    redirect(URL(r = request, f = \'manage\', args=[\'category\']))\n                else:\n                    session.flash=T("(Caught) Error occured")\n        \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.categories.id == id).delete()\n                session.flash = T("Category deleted")\n                redirect(URL(r = request, f = \'manage/category\'))\n        \n        else:\n            edit_form = \'\'\n\n        return dict(rows = rows, manage_title = manage_title, manage_text=\'\', edit_form = edit_form, area = area)        \n    \n    elif area == \'theme\':\n        record = None\n        form = \'\'\n        manage_title = T(\'Manage Child Theme\')\n        manage_text = T(\'The theme inherits styles from the parent theme chosen, and sets its specific by caling the stylesheet url given, overwriting parent\\\' style, and/or creating new ones.\')\n        \n        if len(request.args)>1:\n            name = request.args[1]\n            theme = utilities.get_from_app_themes(name)\n            if theme:\n                if  theme.find(utilities.theme_sep_token)>0:\n                    db.app_themes.id.default = -10\n                    db.app_themes.theme_name.default = name\n                    db.app_themes.theme_base.default = utilities.get_from_theme(\'base\', name=None, theme=theme)\n                    db.app_themes.theme_stylesheet_url.default = utilities.get_from_theme(\'stylesheet\', name=None, theme=theme)\n                else:\n                    response.flash = T(\'Base themes are not editable\')\n            else:\n                response.flash = T(\'Theme not found\')\n\n        db.app_themes.theme_editor.default = auth.user.email\n\n        form = SQLFORM(db.app_themes, deletable=True)\n        if form.accepts(request.vars, session, dbio = False):\n            def get_theme(f_v):\n                return (\'%(name)s%(token)s%(base)s%(token)s%(stylesheet)s%(token)s%(author)s\' % \n                        dict(\n                           name=f_v.theme_name,base=f_v.theme_base,\n                           stylesheet=f_v.theme_stylesheet_url,\n                           author=auth.user.email,token=utilities.theme_sep_token)\n                )\n            theme = None\n            error = False\n            for i in range(len(app_config.APP_THEMES)):\n                t = utilities.get_from_theme(\'name\', theme=app_config.APP_THEMES[i])\n                if t == form.vars.theme_name:\n                    if (utilities.get_from_theme(\'author\', theme=app_config.APP_THEMES[i]) !=auth.user.email\n                        and utilities.get_from_theme(\'stylesheet\', theme=app_config.APP_THEMES[i]) !=form.vars.theme_stylesheet_url):\n                        response.flash = T(\'This theme name is already in use.\')\n                        error = True\n                    else:\n                        app_config.APP_THEMES[i] = get_theme(form.vars)\n                        theme = t\n                        \n            if not theme and not error:\n                theme = get_theme(form.vars)\n                app_config.APP_THEMES.append(theme)\n                \n            if theme:\n                db(db.app_config.id == app_config.id).update(APP_THEMES = app_config.APP_THEMES)\n                session.flash = T(\'Theme saved.\')\n                redirect(URL(r = request, args = [request.args[0], form.vars.theme_name]))\n    \n        return dict(edit_form = form, manage_title=manage_title, manage_text=manage_text)\n        \n    else:\n        redirect(URL(r = request,f = \'index\'))\n\ndef error():\n    ticket=\'\'\n    code=\'\'\n    requested_uri=\'\'\n    err=\'\'\n\n    try:\n        ticket=request.vars.ticket\n        if ticket == \'None\': ticket=None\n        \n        code=request.vars.code\n        if code == \'None\': code=None\n        \n        requested_uri=request.vars.requested_uri\n        if requested_uri == \'None\': requested_uri=None\n    except Exception, ex:\n        err=str(ex)\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        \n    return dict(ticket=ticket, code=code, requested_uri=requested_uri, err=err)\n        \ndef files():\n    upload_form=SQLFORM(db.files,labels=file_labels)\n    if request.vars.file!=None:\n        # TODO: strip_path_and_sanitize()\n        upload_form.vars.filename=request.vars.file.filename.lower()\n        if upload_form.accepts(request.vars,session):\n            response.flash=T(\'file uploaded\')\n        \n    download_form=FORM(LABEL(T(\'Enter file name\'))\n                        ,INPUT(_name="filename", requires=IS_NOT_EMPTY())\n                        ,INPUT(_type="submit",_value=T(\'Submit\')))\n    if (download_form.accepts(request.vars,session)\n        or (request.vars.download and request.vars.filename)):\n        _file=db(db.files.filename==request.vars.filename.lower()).select()\n        if _file: \n            _file=_file[0]\n            redirect(URL(r = request,f = \'download/%s/%s\' % (_file.file,_file.filename)))\n        else:\n            response.flash=T(\'no file found with the name %(filename)s\',\n                             dict(filename=request.vars.filename.lower()))\n        \n    return dict(upload_form=upload_form,download_form=download_form,\n                upload_title=T(\'upload\'),download_title=T(\'download\'))\n\ndef json():\n    area=request.args[0]    \n    return response.json({\n        \'status\' : 1,\n        \'message\' : \'done\',\n        \'result\' : {\n            \'pages\' : lambda x: db(db.posts.post_type==\'page\').select(),\n            \'themes\' : lambda x: app_config.APP_THEMES\n        }.get(request.args[0], None)(request.args[0])\n    })\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args[0]==\'logout\':\n        session.user_authorization_done=False\n    if auth.user and request.vars.next:\n        redirect(request.vars.next)\n    return dict(form=auth())\n\n\n@auth.requires_login()\ndef app_admin():\n    area=request.args[0]\n    if area==\'auth_user\':\n        form=SQLFORM(db.auth_user,response.anon_user,fields=[\'display_name\',\'email\'])\n        if request.post_vars.email:\n            auth.user.email=request.vars.email\n            \n            if (request.vars.email==response.anon_user.email and\n                request.vars.display_name==response.anon_user.display_name):\n                if form.accepts(request.vars,session):\n                    session.flash =T("Update done.")\n                    redirect(URL(r = request,f=\'index\'))\n                else:\n                    db.auth_user.insert(registration_id=auth.user.registration_id,\n                                        email=request.vars.email,\n                                        display_name=request.vars.display_name)\n                    session.flash =T("Data successfully saved.")\n                    redirect(URL(r = request,f=\'index\'))\n        return dict(form=form,area=area)\n    if area==\'user\':\n        if auth.user:\n            if auth.user.is_admin:\n                _fields=[\'registration_id\',\'display_name\',\'email\',\'is_admin\']\n            else:\n                _fields=[\'display_name\',\'email\']\n                \n            form=None\n            usr=None\n            if len(request.args)>1 and len(request.args[1])>0:\n                usr=db(db.auth_user.id==request.args[1]).select()\n                if len(usr)>0:usr=usr[0]\n                else:\n                    session.flash=\'User not found.\'\n                    redirect(URL(r=request,f=\'app_admin/user/\'))\n                form=SQLFORM(db.auth_user,usr,fields=_fields,deletable=True)\n                if form.accepts(request.vars,session):\n                    if request.vars.delete_this_record==\'on\':\n                        response.flash=T(\'User deleted.\')\n                    else:\n                        response.flash=T(\'User updated.\')\n                _form_title=T("edit user")\n            else:\n                form=SQLFORM(db.auth_user,fields=_fields)\n                if form.accepts(request.vars,session):\n                    session.flash=\'User created.\'\n                    redirect(URL(r=request,f=\'app_admin/user/%(id)i\' % form.vars.id))\n                _form_title=T("create user")\n            return dict(form=form,area=area,form_title=_form_title)\n        else:            \n            response.flash=T(\'woooups... not allowed\')\n            return dict(form=\'...\',area=area,form_title=\'...\')\n\ndef download():\n    import os\n    return response.stream(open(os.path.join(request.folder,\'uploads\',request.args[0]),\'rb\'))\n\n@auth.requires_login()\ndef do_stuff():\n    log_wrapped(\'1\', 1)\n    if request.args[0] in [\'posts_app\', \'links_app\']:\n        log_wrapped(\'2\', 2)\n        instance=db.posts if request.args[0]==\'posts_app\' else db.links\n        _ids=request.args[1].split(\',\')\n        log_wrapped(\'_ids\', _ids)\n        for i in range(len(_ids)):\n            try:\n                db(instance.id == int(_ids[i])).update(application=request.application)\n            except Exception, ex:\n                pass\n        session.flash=T(\'%(inst)s application updated.\', dict(inst=str(instance)))\n    \n    redirect(URL(r = request,f = \'index\'))\n\nresponse._vars=response._caller(page)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.IndexError object at 0xa6f31ac>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.IndexError object at 0xa6f31ac>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.IndexError object at 0xa6f31ac>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.IndexError object at 0xa6f31ac>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.IndexError object at 0xa6f31ac>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.IndexError object at 0xa6f31ac>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.IndexError object at 0xa6f31ac>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.IndexError object at 0xa6f31ac>"
p26
sS'args'
p27
S"('list index out of range',)"
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.IndexError object at 0xa6f31ac>"
p30
sS'__class__'
p31
S"<type 'exceptions.IndexError'>"
p32
sS'__delattr__'
p33
S"<method-wrapper '__delattr__' of exceptions.IndexError object at 0xa6f31ac>"
p34
sS'__repr__'
p35
S"<method-wrapper '__repr__' of exceptions.IndexError object at 0xa6f31ac>"
p36
sS'__dict__'
p37
S'{}'
p38
sS'__doc__'
p39
S"'Sequence index out of range.'"
p40
sS'__init__'
p41
S"<method-wrapper '__init__' of exceptions.IndexError object at 0xa6f31ac>"
p42
sS'__new__'
p43
S'<built-in method __new__ of type object at 0x8239ec0>'
p44
ssS'evalue'
p45
S'list index out of range'
p46
sS'request'
p47
(dp48
S'function'
p49
S"'page'"
p50
sS'body'
p51
S'<cStringIO.StringO object at 0xa2385c0>'
p52
sS'wsgi'
p53
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p54
sS'extension'
p55
S"'html'"
p56
sS'vars'
p57
S"<Storage {'theme': 'test'}>"
p58
sS'cid'
p59
S'None'
p60
sS'url'
p61
S'<gluon.html.XML object at 0xa2388ec>'
p62
sS'raw_extension'
p63
S'None'
p64
sg27
S"['24']"
p65
sS'controller'
p66
S"'default'"
p67
sS'cookies'
p68
S"<SimpleCookie: session_id_a='127.0.0.1-f2e57fa8-...0a54b1-b72c-452e-8723-42851aaa17fe' theme='test'>"
p69
sS'application'
p70
S"'a'"
p71
sS'ajax'
p72
S'False'
p73
sS'client'
p74
S"'127.0.0.1'"
p75
sS'env'
p76
S"<Storage {'wsgi_multithread': True, 'http_accept...nput': <socket._fileobject object at 0x9f7ed84>}>"
p77
sS'raw_args'
p78
S"'24'"
p79
sS'get_vars'
p80
S"<Storage {'theme': 'test'}>"
p81
sS'folder'
p82
S"'/home/herve/development/workspaces/molhokwai.net/web/applications/a/'"
p83
sS'now'
p84
S'datetime.datetime(2011, 2, 25, 16, 19, 26, 391472)'
p85
sS'post_vars'
p86
S'<Storage {}>'
p87
ssS'frames'
p88
(lp89
(dp90
S'file'
p91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py'
p92
sS'dump'
p93
(dp94
S'environment'
p95
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0xa0a73ec>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p96
sS'ccode'
p97
S'<code object <module> at 0xa511a88, file "/home/...b/applications/a/controllers/default.py", line 4>'
p98
ssS'lnum'
p99
I188
sS'lines'
p100
(dp101
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p102
sI183
S'        if type(code) == types.CodeType:'
p103
sI184
S'            ccode = code'
p104
sI185
S'        else:'
p105
sI186
S'            ccode = compile2(code,layer)'
p106
sI187
S''
sI188
S'        exec ccode in environment'
p107
sI189
S'    except HTTP:'
p108
sI190
S'        raise'
p109
sI191
S'    except Exception:'
p110
ssS'call'
p111
S'(code="###################################\\n## CONTROLLE...\'index\'))\\n\\nresponse._vars=response._caller(page)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'AppDetails\': <class __builtin__.AppDetails at 0xa0a73ec>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, ...}, layer=\'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py\')'
p112
sS'func'
p113
S'restricted'
p114
sa(dp115
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p116
sg93
(dp117
S'post_helper'
p118
S'undefined'
p119
sS'common.controller_init'
p120
S'<function controller_init at 0xa65d304>'
p121
sS'page_helper'
p122
g119
sS'db'
p123
S"<DAL {'auth_event': <Table {'origin': <gluon.dal..., 'id': <gluon.dal.Field object at 0xa30ad4c>}>}>"
p124
sS'cache'
p125
S'<gluon.cache.Cache object at 0xa238b4c>'
p126
sS'request'
p127
S"<Storage {'function': 'page', 'body': <cStringIO... 16, 19, 26, 391472), 'post_vars': <Storage {}>}>"
p128
sS'auth'
p129
S'<gluon.tools.Auth object at 0xa238e4c>'
p130
sS'app_objects'
p131
S'<__builtin__.Struct instance at 0x9f8644c>'
p132
sS'session'
p133
S"<Storage {'_language': 'en', 'user_authorization...91472), 'remember': False}>, 'authorized': True}>"
p134
sS'common'
p135
S"<module 'applications.a.modules.common' from 'applications/a/modules/common.py'>"
p136
sS'response'
p137
S"<Storage {'body': <cStringIO.StringO object at 0...bda> at 0x9f7eb8c>, 'view': 'default/page.html'}>"
p138
sS'T'
S'<gluon.languages.translator object at 0xa23840c>'
p139
ssg99
I7
sg100
(dp140
I2
S'## CONTROLLER INITIALIZATION'
p141
sI3
S'###################################'
p142
sI4
S'if True:'
p143
sI5
S"    exec('from applications.%s.modules import common' % this_app)"
p144
sI6
S"    app_objects=Struct(**{'details':app_details,'config':app_config,'log_wrapped':log_wrapped,'utilities':utilities})"
p145
sI7
S'    page_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_objects)'
p146
sI8
S''
sI9
S'try:pass'
p147
sI10
S'except Exception, ex:'
p148
sI11
S"    log_wrapped('Er', ex)"
p149
ssg111
S'()'
p150
sg113
S'<module>'
p151
sa(dp152
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/modules/common.py'
p153
sg93
(dp154
S'name'
p155
g119
sS'utilities.get_from_theme'
p156
S'<bound method Utilities.get_from_theme of <__builtin__.Utilities instance at 0x9e3370c>>'
p157
sS'utilities'
p158
S'<__builtin__.Utilities instance at 0x9e3370c>'
p159
sS'response.theme'
p160
S"'0'"
p161
sS'response'
p162
S"<Storage {'body': <cStringIO.StringO object at 0...bda> at 0x9f7eb8c>, 'view': 'default/page.html'}>"
p163
sS'response.theme_stylesheet'
p164
S'None'
p165
ssg99
I269
sg100
(dp166
I262
S'    response.base_theme = None'
p167
sI263
S'    response.theme_stylesheet = None'
p168
sI264
S'    base_theme = utilities.get_base_of_theme(response.theme)'
p169
sI265
S''
sI266
S'    if base_theme != response.theme:'
p170
sI267
S'        response.child_theme = response.theme'
p171
sI268
S'        response.theme = base_theme'
p172
sI269
S"        response.theme_stylesheet = utilities.get_from_theme('stylesheet', name=response.theme)"
p173
sI270
S''
sI271
S'    return page_helper, post_helper'
p174
ssg111
S"(request=<Storage {'function': 'page', 'body': <cStringIO... 16, 19, 26, 391472), 'post_vars': <Storage {}>}>, response=<Storage {'body': <cStringIO.StringO object at 0...bda> at 0x9f7eb8c>, 'view': 'default/page.html'}>, session=<Storage {'_language': 'en', 'user_authorization...91472), 'remember': False}>, 'authorized': True}>, cache=<gluon.cache.Cache object at 0xa238b4c>, T=<gluon.languages.translator object at 0xa23840c>, db=<DAL {'auth_event': <Table {'origin': <gluon.dal..., 'id': <gluon.dal.Field object at 0xa30ad4c>}>}>, auth=<gluon.tools.Auth object at 0xa238e4c>, app_objects=<__builtin__.Struct instance at 0x9f8644c>)"
p175
sg113
S'controller_init'
p176
sa(dp177
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/models/utilities.py'
p178
sg93
(dp179
S'what'
p180
S"'stylesheet'"
p181
sS'whats'
p182
S"{'author': 3, 'base': 1, 'name': 0, 'stylesheet': 2}"
p183
sS'theme.split'
p184
S'<built-in method split of str object at 0x808c60>'
p185
sS'self'
p186
S'<__builtin__.Utilities instance at 0x9e3370c>'
p187
sS'theme'
p188
S"'0'"
p189
sS'self.theme_sep_token'
p190
S"'#:#'"
p191
ssg99
I214
sg100
(dp192
I209
S''
sI210
S'    def get_from_theme(self, what, name=None, theme=None):'
p193
sI211
S'        if not name is None:'
p194
sI212
S'            theme = self.get_from_app_themes(name)'
p195
sI213
S"        whats = {'name':0, 'base':1, 'stylesheet':2, 'author':3}"
p196
sI214
S'        return theme.split(self.theme_sep_token)[whats[what]]'
p197
sI215
S''
sI216
S'    def get_base_of_theme(self, name):'
p198
sI217
S'        if name in app_details.themes_base_list:'
p199
sI218
S'            return name'
p200
ssg111
S"(self=<__builtin__.Utilities instance at 0x9e3370c>, what='stylesheet', name='0', theme='0')"
p201
sg113
S'get_from_theme'
p202
sasS'pyver'
p203
S'Python 2.5.1: /usr/local/bin/python'
p204
sS'session'
p205
(dp206
S'user_authorization_done'
p207
S'True'
p208
sS'flash'
p209
S'None'
p210
sS'auth'
p211
S"<Storage {'expiration': 3600, 'user': <Storage {..., 2, 25, 16, 19, 26, 391472), 'remember': False}>"
p212
sS'_formkey[app_themes_create]'
p213
S"'5d997b8f-d3b2-4b14-b237-f14366f0ed28'"
p214
sS'authorized'
p215
g208
sS'_language'
p216
S"'en'"
p217
ssS'etype'
p218
S"<type 'exceptions.IndexError'>"
p219
sS'date'
p220
S'Fri Feb 25 16:19:26 2011'
p221
sS'response'
p222
(dp223
S'_vars'
p224
S'None'
p225
sg68
S"<SimpleCookie: session_id_a='127.0.0.1-f2e57fa8-0a88-4de1-aaaa-9f6c08244d71' theme='test'>"
p226
sS'links'
p227
S"[['web2py', 'http://www.web2py.com', 1], ['Python', 'http://www.python.org', 2], ['DePaul CTI', 'http://www.cs.depaul.edu', 3], ['DePaul University', 'http://www.depaul.edu', 5], ['downloads', '/a/default/page/32', 15], ['media / picasa / gallery', '/a/media/picasa/gallery', 16], ['manage media / manage picasa albums / manage photos', '/a/media/picasa/albums', 17], ['setup, application initialization', '/a/setup', 18], ['twitter', '/a/media/social/twitter', 19]]"
p228
sS'posts'
p229
S'<gluon.dal.Rows object at 0xa6f32ec>'
p230
sS'themes'
p231
S"['0', '1', 'cms', 'pypress', 'wordpres', 'test#:#0#:#http://localhost/css/base.css#:#molhokwai@gmail.com', 'test1#:#0#:#http://localhost/css/base1.css#:#herve.mayou@gmail.com']"
p232
sS'theme_stylesheet'
p233
S'None'
p234
sS'meta'
p235
S'<Storage {}>'
p236
sS'_view_environment'
p237
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0xa0a73ec>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p238
sS'keywords'
p239
S"'blog, weblog, journal, web, log, web2py, pypress...straight-forward, direct, programming, programmer'"
p240
sS'files'
p241
S'[]'
p242
sS'last_posts'
p243
S"[['nn : bayesian classifer', datetime.datetime(2011, 2, 18, 12, 7, 56), <gluon.html.XML object at 0xa12ea2c>], ['cms_home', datetime.datetime(2011, 2, 6, 13, 1, 36), <gluon.html.XML object at 0xa12e9ac>], ['cms_help', datetime.datetime(2011, 2, 6, 13, 1, 36), <gluon.html.XML object at 0xa12e92c>], ['test', datetime.datetime(2011, 1, 14, 14, 59, 41), <gluon.html.XML object at 0xa12e9cc>], ['acknowledgements', datetime.datetime(2011, 1, 2, 10, 41, 29), <gluon.html.XML object at 0xa12e50c>]]"
p244
sS'title'
p245
S'"molhokwai.net - \'a\' cm/dms"'
p246
sS'home_page'
p247
S"<Row {'post_text_TCode': 'page_id_24', 'post_att...elete_record': <function <lambda> at 0xa4dddf4>}>"
p248
sS'menu'
p249
S"[['home', False, '/a/default/page/16']]"
p250
sS'flash'
p251
S"''"
p252
sS'theme'
p253
S"'0'"
p254
sS'session_id_name'
p255
S"'session_id_a'"
p256
sS'_custom_commit'
p257
S'None'
p258
sS'session_filename'
p259
S"'/home/herve/development/workspaces/molhokwai.net...ns/127.0.0.1-f2e57fa8-0a88-4de1-aaaa-9f6c08244d71'"
p260
sg51
S'<cStringIO.StringO object at 0x9fa08a0>'
p261
sS'description'
p262
S'"molhokwai.net - \'a\' cm/dms, lightweight, simple, straight & direct"'
p263
sS'session_file'
p264
S"<open file '/home/herve/development/workspaces/m...4de1-aaaa-9f6c08244d71', mode 'rb+' at 0xa4c5de8>"
p265
sS'_caller'
p266
S'<function <lambda> at 0x9f7eb8c>'
p267
sS'_custom_rollback'
p268
S'None'
p269
sS'child_theme'
p270
S"'test'"
p271
sS'pages'
p272
S"[['beliefs', False, '/a/default/page/15'], ['home', False, '/a/default/page/16'], ['community', False, '/a/default/page/18'], ['SMS', False, '/a/default/page/21'], ['', False, '/a/default/page/23'], ['a_home', False, '/a/default/page/24'], ['a_help', False, '/a/default/page/26'], ['help', False, '/a/default/page/27'], ['a_home', False, '/a/default/page/29'], ['siblos', False, '/a/default/page/30'], ['dev', False, '/a/default/page/31'], ['downloads', False, '/a/default/page/32'], ['themes', False, '/a/default/page/35'], ['acknowledgements', False, '/a/default/page/37'], ['test', False, '/a/default/page/38']]"
p273
sS'categories'
p274
S"[['misc', 2, '/a/default/category/misc'], ['message', 1, '/a/default/category/message']]"
p275
sS'name'
p276
S'"\'a\' cm/dms"'
p277
sS'auth_users'
p278
S'<gluon.dal.Rows object at 0x9d2550c>'
p279
sS'help_page'
p280
S"<Row {'post_text_TCode': 'page_id_26', 'post_att...elete_record': <function <lambda> at 0xa4dd8ec>}>"
p281
sS'session_id'
p282
S"'127.0.0.1-f2e57fa8-0a88-4de1-aaaa-9f6c08244d71'"
p283
sS'headers'
p284
S"<Storage {'Expires': 'Fri, 25 Feb 2011 15:19:26 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p285
sS'status'
p286
S'200'
p287
sS'postprocessing'
p288
S'[]'
p289
sS'base_theme'
p290
S'None'
p291
sS'view'
p292
S"'default/page.html'"
p293
ssS'locals'
p294
(dp295
S'what'
p296
S"'stylesheet'"
p297
sS'self'
p298
S'<__builtin__.Utilities instance at 0x9e3370c>'
p299
sS'whats'
p300
S"{'author': 3, 'base': 1, 'name': 0, 'stylesheet': 2}"
p301
sg253
S"'0'"
p302
sg276
S"'0'"
p303
sssS'traceback'
p304
S'Traceback (most recent call last):\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py", line 7, in <module>\n    page_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_objects)\n  File "applications/a/modules/common.py", line 269, in controller_init\n    response.theme_stylesheet = utilities.get_from_theme(\'stylesheet\', name=response.theme)\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/models/utilities.py", line 214, in get_from_theme\n    return theme.split(self.theme_sep_token)[whats[what]]\nIndexError: list index out of range\n'
p305
s.