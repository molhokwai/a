(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p4
sS'code'
p5
S'###################################\n## CONTROLLER INITIALIZATION\n###################################\n\ntry:\n    exec(\'from applications.%s.modules import common\' % this_app)\n    app_objects=Struct(**{\'details\':app_details,\'config\':app_config,\'log_wrapped\':log_wrapped,\'utilities\':utilities})\n    page_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_objects)\nexcept Exception, ex:\n    log_wrapped(\'Er\', ex)\n\n\n###################################\n## CONTROLLER FUNCTIONS\n###################################\n\n# The main page\n# Shows the home page if one created (see \'home_page\' function page with title)\n# Otherwise, defaults to showing the first 10 posts\ndef index():\n    if len(request.args)==0:\n        if response.home_page:\n            redirect(URL(r=request, c=\'default\', f=\'page\', args=[response.home_page.id]))\n        else:\n            redirect(URL(r=request, c=\'setup\'))\n    else:\n      if a_convert.to_int(request.args[0]):\n          return dict(posts = db(db.posts.id == int(request.args[0])).select())\n      else:\n          posts=db(db.posts.post_title == request.args[0]).select()\n          if not posts:\n              posts = filter(lambda x: x.post_title.lower().find(request.args[0].lower())>0,response.posts)\n          return dict(posts = posts)          \n      \n\n# The post page\n# Shows the entire post, the comments, and the comment form\ndef post():\n    #try: \n    post_id = int(request.args[0])\n    post = db(db.posts.id == post_id).select()[0]\n    \n    if post and post.auth_requires_login and not auth.user:\n        redirect(URL(r = request, f = \'user\', args = [\'login\']))\n\n    comments = db(db.comments.post_id == post_id).select(db.comments.ALL)\n    comment_count = len(db(db.comments.post_id == post_id).select(db.comments.ALL))\n    db.comments.post_id.default = post_id\n    comment_form = SQLFORM(db.comments, fields = [\'comment_author\', \'comment_author_email\', \'comment_author_website\', \'comment_text\'], labels = comment_labels)\n        \n    if comment_form.accepts(request.vars, session):\n        session.flash = T("Comment added.")\n        redirect(URL(r = request,f = \'post/%i\' % post_id ))\n\n    return dict(post = post, comments = comments, comment_form = comment_form, comment_count = comment_count)\n    #except: \n    #    redirect(URL(r = request,f = \'index\'))\n\n# The page page\n# Shows the entire page. Does not show comments or the comment form\ndef page():\n    try:\n        if len(request.args)>0:\n            post=\'\'\n            if a_convert.to_int(request.args[0]):\n                post = db(db.posts.id == int(request.args[0])).select()[0]\n            else:\n                post = db(db.posts.post_title == request.args[0]).select()\n                if not post:\n                    pg = filter(lambda x: x[0].lower().find(request.args[0].lower())>=0, response.pages)\n                    if not pg:\n                      # fix for _ replacing space in url\n                      pg = filter(lambda x: x[0].lower().find(request.args[0].replace(\'_\', \' \').lower())>=0, response.pages)\n                    if pg and len(pg)>0: pg = pg[0]\n                    post = db(db.posts.id == int(pg[2].replace(\'/%s/default/page/\' % this_app, \'\'))).select()\n                if post: post = post[0]\n                \n            if post and post.auth_requires_login and not auth.user:\n                redirect(URL(r = request, f = \'user\', args = [\'login\']))\n            \n            nake=(request.args[len(request.args)-1]==\'nake\'\n                 or post.post_text.find(\'<!-- nake page -->\')>=0)\n        \n            return dict(post = post, nake  = nake)\n        else:\n            redirect(URL(r = request,f = \'index\'))\n            \n    except Exception, ex: \n        log_wrapped(\'Error\', str(ex))\n        session.flash=T("(Caught) Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n# The pages page\n# Shows links to all pages\ndef pages():\n    return dict(manage_title=T("pages"))\n\n# The category page\n# Shows all the posts in the requested category\ndef category():\n    def fp(p): return p.post_type==\'post\'\n    try:\n        cat_name = request.args[0]\n        cat = db(db.categories.category_name == cat_name\n                    ).select(db.categories.ALL)[0]\n        posts=[]\n        try:\n            posts = db((db.posts.post_type == \'post\') &\n                       (db.posts.post_category == cat.id) &\n                        ((db.posts.application == request.application) | \n                        (db.posts.application == None))\n                       ).select(db.posts.ALL) ## , orderby=~db.posts.post_time\n        except Exception, ex:\n            posts = db((db.posts.post_type == \'post\') &\n                       (db.posts.post_category == cat.id)\n                       ).select(db.posts.ALL) ## , orderby=~db.posts.post_time\n        filter(fp,posts)\n\n        response.sidebar_note = T("You are currently browsing the archives for the %(cat_name)s category.",dict(cat_name=cat_name))\n        return dict(posts = posts)\n    except:\n        redirect(URL(r = request,f = \'index\'))\n\n@auth.requires_login()\ndef add():\n    try:\n        area = request.args[0]\n\n        if area == "post":\n            db.posts.post_type.default = \'post\'\n            page_form = SQLFORM(db.posts, fields = [\'post_title\', \'post_text\', \n                                                    \'post_category\', \'is_translated\', \'auth_requires_login\'], \n                                                    labels = post_labels)\n            page_form.append(INPUT(_type=\'checkbox\', \n                                    _name=\'post_attributes_content_is_original\', \n                                    _id=\'post_attributes_content_is_original\', value=\'\'))\n            page_title = T("Add Post")\n            \n            if page_form.accepts(request.vars, session):\n                tcode="post_id_"+str(page_form.vars.id)\n                from gluon.contrib import simplejson\n                _json=simplejson.loads(request.vars.post_attributes_json)\n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                pg=db(db.posts.id==page_form.vars.id).update(\n                                                post_text_TCode=tcode,\n                                                post_attributes_json=simplejson.dumps(_json))\n                ## FEATURE REQUEST: to add the translation code if not existing\n                T(tcode)\n                session.flash = T("Post added.")\n                redirect(URL(r = request,f = \'post/%i\' % page_form.vars.id))\n        \n        elif area == "page":\n            db.posts.post_type.default = \'page\'\n            page_form = SQLFORM(db.posts, fields = [\'post_title\', \'post_text\', \n                                                    \'show_in_menu\', \'is_translated\'], \n                                                    labels = post_labels)\n            page_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                    _id=\'post_attributes_content_is_original\', value=\'\'))\n            page_title = T("Add Page")\n            \n            if page_form.accepts(request.vars, session):\n                tcode="page_id_"+str(page_form.vars.id)\n                from gluon.contrib import simplejson\n                _json=simplejson.loads(request.vars.post_attributes_json)\n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                pg=db(db.posts.id==page_form.vars.id).update(\n                                                post_text_TCode=tcode,\n                                                post_attributes_json=simplejson.dumps(_json)\n                                            )\n                ## FEATURE REQUEST: to add the translation code if not existing\n                T(tcode)\n                session.flash = T("Page added.")\n                redirect(URL(r = request,f = \'page/%i\' % page_form.vars.id))          \n                \n        else:\n            redirect(URL(r = request,f = \'index\'))\n            \n        return dict(page_title = page_title, page_form = page_form)\n    except Exception, ex:\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n@auth.requires_login()\ndef edit():\n    this_item=None\n    area=None\n    id=None\n    # p_a_c_i_o_val : page attr. content is orginal value\n    p_a_c_i_o_val=None\n    try:\n        area = request.args[0]\n        id = int(request.args[1])\n        this_item = db(db.posts.id == id).select()[0]\n    except Exception, ex:\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n    try:\n        from gluon.contrib import simplejson\n        _json=simplejson.loads(this_item.post_attributes_json)\n        p_a_c_i_o_val=\'on\' if _json[\'content_is\'][\'original\'] else \'\'\n    except Exception, ex:\n        session.flash=T("(Minor) Error occured: %(err)s ", dict(err=str(ex)))\n    \n    if area == \'post\':\n        edit_form = SQLFORM(db.posts, this_item, fields = [\'post_title\', \'post_text\', \'post_text_TCode\', \n                                                            \'post_category\', \'is_translated\', \'auth_requires_login\'], \n                                                            deletable=True, labels = post_labels)\n        edit_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                _id=\'post_attributes_content_is_original\', value=p_a_c_i_o_val))\n        edit_title = T("Edit Post")\n    \n        if edit_form.accepts(request.vars, session):\n            if request.vars.delete_this_record==\'on\':\n                session.flash = T("Post deleted.")\n                redirect(URL(r = request,f = \'index/posts\'))\n            else:    \n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                db(db.posts.id==id).update(post_attributes_json=simplejson.dumps(_json))\n                session.flash = T("Post updated.")\n                redirect(URL(r = request,f = \'post/%s\' %id))\n\n    elif area == \'page\':\n        this_item = db(db.posts.id == id).select()[0]\n        edit_form = SQLFORM(db.posts, this_item, fields = [\'post_title\', \'post_text\', \'post_text_TCode\', \n                                                            \'is_translated\', \'show_in_menu\'], \n                                                            deletable=True, labels = post_labels)\n        edit_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                 _id=\'post_attributes_content_is_original\', value=p_a_c_i_o_val))\n        edit_title = T("Edit Page")\n    \n        if edit_form.accepts(request.vars, session):\n            if request.vars.delete_this_record==\'on\':\n                session.flash = T("Page deleted.")\n                redirect(URL(r = request,f = \'pages\'))\n            else:\n                try:\n                    _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                    db(db.posts.id==id).update(post_attributes_json=simplejson.dumps(_json))\n                    session.flash = T("Page updated.")\n                except Exception, ex:\n                    session.flash=T("(Minor) Error occured: %(err)s ", dict(err=str(ex)))\n                finally:\n                    redirect(URL(r = request,f = \'page/%s\' %id))\n                        \n    else:\n        redirect(URL(r = request,f = \'index\'))\n    \n    return dict(edit_form = edit_form, edit_title = edit_title, post=this_item)\n\n        \n@auth.requires_login()\ndef manage():\n\n    area = None\n    if len(request.args)>0:\n        area = request.args[0]\n    else:\n        area = \'post\'\n    \n    try: command = request.args[1]\n    except: command = ""\n        \n    if area == \'page\':\n        redirect(URL(r = request, f=\'pages\'))\n    \n    elif area == \'post\':\n        rows = db(db.posts.post_type == \'post\').select(db.posts.ALL)\n        manage_title = T(\'Manage Posts\')\n\n        if command == \'add\':\n            edit_form = SQLFORM(db.posts, labels = post_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Post added")\n                redirect(URL(r = request, f = \'manage/post\'))\n            else:\n                session.flash = T("Error")\n       \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_post = db(db.posts.id == id).select()[0]\n                edit_form = SQLFORM(db.posts, this_post)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Post updated")\n                    redirect(URL(r = request, f = \'manage\', args=[\'post\']))\n                else:\n                    session.flash=T("(Caught) Error occured")\n                    \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.posts.id == id).delete()\n                session.flash = T("Post deleted")\n                redirect(URL(r = request, f = \'index\'))\n        else:\n            edit_form = \'\'\n\n        return dict(rows = rows, manage_title = manage_title, manage_text=\'\', edit_form = edit_form, area = area)\n    \n    elif area == \'link\':\n        rows = db().select(db.links.ALL)\n        manage_title = T(\'Manage Links\')\n\n        if command == \'add\':\n            edit_form = SQLFORM(db.links, labels = link_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Link added")\n                redirect(URL(r = request, f = \'manage\', args=[\'link\']))\n            else:\n                session.flash=T("(Caught) Error occured")\n       \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_link = db(db.links.id == id).select()[0]\n                edit_form = SQLFORM(db.links, this_link)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Link updated")\n                    redirect(URL(r = request, f = \'manage\', args=[\'link\']))\n                else:\n                    session.flash=T("(Caught) Error occured")\n        \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.links.id == id).delete()\n                session.flash = T("Link deleted")\n                redirect(URL(r = request, f = \'manage/link\'))\n        else:\n            edit_form = \'\'\n            \n        return dict(rows = rows, manage_title = manage_title, manage_text=\'\', edit_form = edit_form, area = area)\n    \n    elif area == \'category\':\n        rows = db().select(db.categories.ALL)\n        manage_title = T(\'Manage Categories\')\n       \n        if command == \'add\':\n            edit_form = SQLFORM(db.categories, labels = cat_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Category added")\n                redirect(URL(r = request, f = \'manage/category\'))\n        \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_cat = db(db.categories.id == id).select()[0]\n                edit_form = SQLFORM(db.categories, this_cat)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Category updated")\n                    redirect(URL(r = request, f = \'manage\', args=[\'category\']))\n                else:\n                    session.flash=T("(Caught) Error occured")\n        \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.categories.id == id).delete()\n                session.flash = T("Category deleted")\n                redirect(URL(r = request, f = \'manage/category\'))\n        \n        else:\n            edit_form = \'\'\n\n        return dict(rows = rows, manage_title = manage_title, manage_text=\'\', edit_form = edit_form, area = area)        \n    \n    elif area == \'theme\':\n        record = None\n        form = \'\'\n        manage_title = T(\'Manage Child Theme\')\n        manage_text = T(\'The theme inherits styles from the parent theme chosen, and sets its specific by caling the stylesheet url given, overwriting parent\\\' style, and/or creating new ones.\')\n        \n        if len(request.args)>1:\n            name = request.args[1]\n            theme = utilities.get_from_app_themes(name)\n            if theme and len(theme)>0 :\n                theme = theme[0]\n                if  theme.find(\':\')>0:\n                    db.app_themes.id.default = 1\n                    db.app_themes.theme_name.default = name\n                    db.app_themes.theme_base.default = utilities.get_from_theme(\'base\', name=None, theme=theme)\n                    db.app_themes.theme_stylesheet_url.default = utilities.get_from_theme(\'stylesheet\', name=None, theme=theme)\n                else:\n                    response.flash = T(\'Base themes are not editable\')\n            else:\n                response.flash = T(\'Theme not found\')\n\n        db.app_themes.theme_editor.default = auth.user.email\n\n        form = SQLFORM(db.app_themes, dbio = False)\n        if form.accepts(request.vars, session):\n            def get_theme(f_v):\n                return \'s%:s%:s%:%s\' % (f_v.theme_name,f_v.theme_base,f_v.theme_stylesheet_url,auth.user.email)\n                \n            log_wrapped(\'get_theme(form.vars)\', get_theme(form.vars))\n            if form.vars.id>0:\n                for i in range(len(app_config.APP_THEMES)):\n                    if app_config.APP_THEMES[i].split(\':\')[0] == form.vars.theme_name:\n                        app_config.APP_THEMES[i] = get_theme(form.vars)\n            else:\n                app_config.APP_THEMES.append(get_theme(form.vars))\n                \n            db(db.app_config.id == app_config.id).update(APP_THEMES = app_config.APP_THEMES)\n            session.flash = T(\'Theme saved.\')\n            redirect(URL(r = request, args = [request.args[0], form.vars.theme_name]))\n    \n        return dict(edit_form = form, manage_title=manage_title, manage_text=manage_text)\n        \n    else:\n        redirect(URL(r = request,f = \'index\'))\n\ndef error():\n    ticket=\'\'\n    code=\'\'\n    requested_uri=\'\'\n    err=\'\'\n\n    try:\n        ticket=request.vars.ticket\n        if ticket == \'None\': ticket=None\n        \n        code=request.vars.code\n        if code == \'None\': code=None\n        \n        requested_uri=request.vars.requested_uri\n        if requested_uri == \'None\': requested_uri=None\n    except Exception, ex:\n        err=str(ex)\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        \n    return dict(ticket=ticket, code=code, requested_uri=requested_uri, err=err)\n        \ndef files():\n    upload_form=SQLFORM(db.files,labels=file_labels)\n    if request.vars.file!=None:\n        # TODO: strip_path_and_sanitize()\n        upload_form.vars.filename=request.vars.file.filename.lower()\n        if upload_form.accepts(request.vars,session):\n            response.flash=T(\'file uploaded\')\n        \n    download_form=FORM(LABEL(T(\'Enter file name\'))\n                        ,INPUT(_name="filename", requires=IS_NOT_EMPTY())\n                        ,INPUT(_type="submit",_value=T(\'Submit\')))\n    if (download_form.accepts(request.vars,session)\n        or (request.vars.download and request.vars.filename)):\n        _file=db(db.files.filename==request.vars.filename.lower()).select()\n        if _file: \n            _file=_file[0]\n            redirect(URL(r = request,f = \'download/%s/%s\' % (_file.file,_file.filename)))\n        else:\n            response.flash=T(\'no file found with the name %(filename)s\',\n                             dict(filename=request.vars.filename.lower()))\n        \n    return dict(upload_form=upload_form,download_form=download_form,\n                upload_title=T(\'upload\'),download_title=T(\'download\'))\n\ndef json():\n    area=request.args[0]    \n    return response.json({\n        \'status\' : 1,\n        \'message\' : \'done\',\n        \'result\' : {\n            \'pages\' : lambda x: db(db.posts.post_type==\'page\').select(),\n            \'themes\' : lambda x: app_config.APP_THEMES\n        }.get(request.args[0], None)(request.args[0])\n    })\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args[0]==\'logout\':\n        session.user_authorization_done=False\n    if auth.user and request.vars.next:\n        redirect(request.vars.next)\n    return dict(form=auth())\n\n\n@auth.requires_login()\ndef app_admin():\n    area=request.args[0]\n    if area==\'auth_user\':\n        form=SQLFORM(db.auth_user,response.anon_user,fields=[\'display_name\',\'email\'])\n        if request.post_vars.email:\n            auth.user.email=request.vars.email\n            \n            if (request.vars.email==response.anon_user.email and\n                request.vars.display_name==response.anon_user.display_name):\n                if form.accepts(request.vars,session):\n                    session.flash =T("Update done.")\n                    redirect(URL(r = request,f=\'index\'))\n                else:\n                    db.auth_user.insert(registration_id=auth.user.registration_id,\n                                        email=request.vars.email,\n                                        display_name=request.vars.display_name)\n                    session.flash =T("Data successfully saved.")\n                    redirect(URL(r = request,f=\'index\'))\n        return dict(form=form,area=area)\n    if area==\'user\':\n        if auth.user:\n            if auth.user.is_admin:\n                _fields=[\'registration_id\',\'display_name\',\'email\',\'is_admin\']\n            else:\n                _fields=[\'display_name\',\'email\']\n                \n            form=None\n            usr=None\n            if len(request.args)>1 and len(request.args[1])>0:\n                usr=db(db.auth_user.id==request.args[1]).select()\n                if len(usr)>0:usr=usr[0]\n                else:\n                    session.flash=\'User not found.\'\n                    redirect(URL(r=request,f=\'app_admin/user/\'))\n                form=SQLFORM(db.auth_user,usr,fields=_fields,deletable=True)\n                if form.accepts(request.vars,session):\n                    if request.vars.delete_this_record==\'on\':\n                        response.flash=T(\'User deleted.\')\n                    else:\n                        response.flash=T(\'User updated.\')\n                _form_title=T("edit user")\n            else:\n                form=SQLFORM(db.auth_user,fields=_fields)\n                if form.accepts(request.vars,session):\n                    session.flash=\'User created.\'\n                    redirect(URL(r=request,f=\'app_admin/user/%(id)i\' % form.vars.id))\n                _form_title=T("create user")\n            return dict(form=form,area=area,form_title=_form_title)\n        else:            \n            response.flash=T(\'woooups... not allowed\')\n            return dict(form=\'...\',area=area,form_title=\'...\')\n\ndef download():\n    import os\n    return response.stream(open(os.path.join(request.folder,\'uploads\',request.args[0]),\'rb\'))\n\n@auth.requires_login()\ndef do_stuff():\n    log_wrapped(\'1\', 1)\n    if request.args[0] in [\'posts_app\', \'links_app\']:\n        log_wrapped(\'2\', 2)\n        instance=db.posts if request.args[0]==\'posts_app\' else db.links\n        _ids=request.args[1].split(\',\')\n        log_wrapped(\'_ids\', _ids)\n        for i in range(len(_ids)):\n            try:\n                db(instance.id == int(_ids[i])).update(application=request.application)\n            except Exception, ex:\n                pass\n        session.flash=T(\'%(inst)s application updated.\', dict(inst=str(instance)))\n    \n    redirect(URL(r = request,f = \'index\'))\n\nresponse._vars=response._caller(manage)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.ValueError object at 0x9bb28ec>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.ValueError object at 0x9bb28ec>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.ValueError object at 0x9bb28ec>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.ValueError object at 0x9bb28ec>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.ValueError object at 0x9bb28ec>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.ValueError object at 0x9bb28ec>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.ValueError object at 0x9bb28ec>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.ValueError object at 0x9bb28ec>"
p26
sS'args'
p27
S'("unsupported format character \':\' (0x3a) at index 2",)'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.ValueError object at 0x9bb28ec>"
p30
sS'__class__'
p31
S"<type 'exceptions.ValueError'>"
p32
sS'__delattr__'
p33
S"<method-wrapper '__delattr__' of exceptions.ValueError object at 0x9bb28ec>"
p34
sS'__repr__'
p35
S"<method-wrapper '__repr__' of exceptions.ValueError object at 0x9bb28ec>"
p36
sS'__dict__'
p37
S'{}'
p38
sS'__doc__'
p39
S"'Inappropriate argument value (of correct type).'"
p40
sS'__init__'
p41
S"<method-wrapper '__init__' of exceptions.ValueError object at 0x9bb28ec>"
p42
sS'__new__'
p43
S'<built-in method __new__ of type object at 0x823a040>'
p44
ssS'evalue'
p45
S"unsupported format character ':' (0x3a) at index 2"
p46
sS'request'
p47
(dp48
S'function'
p49
S"'manage'"
p50
sS'body'
p51
S"<open file '<fdopen>', mode 'w+b' at 0xa189068>"
p52
sS'wsgi'
p53
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p54
sS'extension'
p55
S"'html'"
p56
sS'vars'
p57
S"<Storage {'theme_stylesheet_url': 'http://localh...ame': 'app_themes_create', 'theme_name': 'test'}>"
p58
sS'cid'
p59
S'None'
p60
sS'url'
p61
S'<gluon.html.XML object at 0xa19faec>'
p62
sS'raw_extension'
p63
S'None'
p64
sg27
S"['theme', 'test']"
p65
sS'controller'
p66
S"'default'"
p67
sS'cookies'
p68
S"<SimpleCookie: session_id_a='127.0.0.1-f2e57fa8-...-b70a54b1-b72c-452e-8723-42851aaa17fe' theme='0'>"
p69
sS'application'
p70
S"'a'"
p71
sS'ajax'
p72
S'False'
p73
sS'client'
p74
S"'127.0.0.1'"
p75
sS'env'
p76
S"<Storage {'content_length': '731', 'http_accept_...6546502792832086994387', 'remote_port': '40934'}>"
p77
sS'raw_args'
p78
S"'theme/test'"
p79
sS'get_vars'
p80
S'<Storage {}>'
p81
sS'folder'
p82
S"'/home/herve/development/workspaces/molhokwai.net/web/applications/a/'"
p83
sS'now'
p84
S'datetime.datetime(2011, 2, 25, 15, 3, 41, 837749)'
p85
sS'post_vars'
p86
S"<Storage {'theme_stylesheet_url': 'http://localh...ame': 'app_themes_create', 'theme_name': 'test'}>"
p87
ssS'frames'
p88
(lp89
(dp90
S'file'
p91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py'
p92
sS'dump'
p93
(dp94
S'environment'
p95
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0xa0a75cc>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p96
sS'ccode'
p97
S'<code object <module> at 0xa0820b0, file "/home/...b/applications/a/controllers/default.py", line 5>'
p98
ssS'lnum'
p99
I188
sS'lines'
p100
(dp101
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p102
sI183
S'        if type(code) == types.CodeType:'
p103
sI184
S'            ccode = code'
p104
sI185
S'        else:'
p105
sI186
S'            ccode = compile2(code,layer)'
p106
sI187
S''
sI188
S'        exec ccode in environment'
p107
sI189
S'    except HTTP:'
p108
sI190
S'        raise'
p109
sI191
S'    except Exception:'
p110
ssS'call'
p111
S'(code="###################################\\n## CONTROLLE...ndex\'))\\n\\nresponse._vars=response._caller(manage)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'AppDetails\': <class __builtin__.AppDetails at 0xa0a75cc>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, ...}, layer=\'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py\')'
p112
sS'func'
p113
S'restricted'
p114
sa(dp115
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p116
sg93
(dp117
sg99
I582
sg100
(dp118
I576
S'            except Exception, ex:'
p119
sI577
S'                pass'
p120
sI578
S"        session.flash=T('%(inst)s application updated.', dict(inst=str(instance)))"
p121
sI579
S''
sI580
S"    redirect(URL(r = request,f = 'index'))"
p122
sI571
S"        _ids=request.args[1].split(',')"
p123
sI572
S"        log_wrapped('_ids', _ids)"
p124
sI573
S'        for i in range(len(_ids)):'
p125
sI574
S'            try:'
p126
sI575
S'                db(instance.id == int(_ids[i])).update(application=request.application)'
p127
ssg111
S'()'
p128
sg113
S'<module>'
p129
sa(dp130
g91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/globals.py'
p131
sg93
(dp132
S'self'
p133
S'undefined'
p134
sS'f'
S'<function manage at 0x9e033e4>'
p135
ssg99
I95
sg100
(dp136
I96
S'        self._view_environment = None'
p137
sI97
S'        self._custom_commit = None'
p138
sI98
S'        self._custom_rollback = None'
p139
sI99
S''
sI90
S"        self.flash = ''           # used by the default view layout"
p140
sI91
S'        self.meta = Storage()     # used by web2py_ajax.html'
p141
sI92
S'        self.menu = []            # used by the default view layout'
p142
sI93
S'        self.files = []           # used by web2py_ajax.html'
p143
sI94
S'        self._vars = None'
p144
sI95
S'        self._caller = lambda f: f()'
p145
ssg111
S'(f=<function manage at 0x9e033e4>)'
p146
sg113
S'<lambda>'
p147
sa(dp148
g91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/tools.py'
p149
sg93
(dp150
S'action'
p151
S'<function manage at 0x9e034c4>'
p152
sS'a'
S'()'
p153
sS'b'
g38
ssg99
I2292
sg100
(dp154
I2287
S'                    self.environment.session.flash = self.environment.response.flash'
p155
sI2288
S'                    return call_or_redirect(self.settings.on_failed_authentication,'
p156
sI2289
S'                                            self.settings.login_url + \\'
p157
sI2290
S"                                                '?_next='+urllib.quote(next)"
p158
sI2291
S'                                            )'
p159
sI2292
S'                return action(*a, **b)'
p160
sI2293
S'            f.__doc__ = action.__doc__'
p161
sI2294
S'            f.__name__ = action.__name__'
p162
sI2295
S'            f.__dict__.update(action.__dict__)'
p163
sI2296
S'            return f'
p164
ssg111
S'(*a=(), **b={})'
p165
sg113
S'f'
sa(dp166
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p167
sg93
(dp168
S'get_theme'
p169
S'<function get_theme at 0x9e03994>'
p170
sS'form.vars'
p171
S"<Storage {'theme_stylesheet_url': 'http://localh...theme_base': '0', 'theme_name': 'test', 'id': 2}>"
p172
sS'global log_wrapped'
p173
S'<function log_wrapped at 0xa092d4c>'
p174
sS'form'
p175
S'<gluon.sqlhtml.SQLFORM object at 0xa382b6c>'
p176
ssg99
I414
sg100
(dp177
I416
S'                for i in range(len(app_config.APP_THEMES)):'
p178
sI417
S"                    if app_config.APP_THEMES[i].split(':')[0] == form.vars.theme_name:"
p179
sI418
S'                        app_config.APP_THEMES[i] = get_theme(form.vars)'
p180
sI409
S'        form = SQLFORM(db.app_themes, dbio = False)'
p181
sI410
S'        if form.accepts(request.vars, session):'
p182
sI411
S'            def get_theme(f_v):'
p183
sI412
S"                return 's%:s%:s%:%s' % (f_v.theme_name,f_v.theme_base,f_v.theme_stylesheet_url,auth.user.email)"
p184
sI413
S''
sI414
S"            log_wrapped('get_theme(form.vars)', get_theme(form.vars))"
p185
sI415
S'            if form.vars.id>0:'
p186
ssg111
S'()'
p187
sg113
S'manage'
p188
sa(dp189
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p190
sg93
(dp191
S'f_v.theme_base'
p192
S"'0'"
p193
sS'auth.user'
p194
S"<Storage {'registration_id': 'https://www.google...ration_key': '', 'email': 'molhokwai@gmail.com'}>"
p195
sS'f_v.theme_stylesheet_url'
p196
S"'http://localhost/css/base.css'"
p197
sS'f_v.theme_name'
p198
S"'test'"
p199
sS'global auth'
p200
S'<gluon.tools.Auth object at 0xa317a6c>'
p201
sS'f_v'
p202
S"<Storage {'theme_stylesheet_url': 'http://localh...theme_base': '0', 'theme_name': 'test', 'id': 2}>"
p203
sS'auth.user.email'
p204
S"'molhokwai@gmail.com'"
p205
ssg99
I412
sg100
(dp206
I416
S'                for i in range(len(app_config.APP_THEMES)):'
p207
sI407
S'        db.app_themes.theme_editor.default = auth.user.email'
p208
sI408
S''
sI409
S'        form = SQLFORM(db.app_themes, dbio = False)'
p209
sI410
S'        if form.accepts(request.vars, session):'
p210
sI411
S'            def get_theme(f_v):'
p211
sI412
S"                return 's%:s%:s%:%s' % (f_v.theme_name,f_v.theme_base,f_v.theme_stylesheet_url,auth.user.email)"
p212
sI413
S''
sI414
S"            log_wrapped('get_theme(form.vars)', get_theme(form.vars))"
p213
sI415
S'            if form.vars.id>0:'
p214
ssg111
S"(f_v=<Storage {'theme_stylesheet_url': 'http://localh...theme_base': '0', 'theme_name': 'test', 'id': 2}>)"
p215
sg113
S'get_theme'
p216
sasS'pyver'
p217
S'Python 2.5.1: /usr/local/bin/python'
p218
sS'session'
p219
(dp220
S'user_authorization_done'
p221
S'True'
p222
sS'flash'
p223
S'None'
p224
sS'auth'
p225
S"<Storage {'expiration': 3600, 'user': <Storage {...1, 2, 25, 15, 3, 41, 837749), 'remember': False}>"
p226
sS'_formkey[app_themes_create]'
p227
S"'dc3d9e02-1013-469e-8389-254cecfe1345'"
p228
sS'authorized'
p229
g222
sS'_language'
p230
S"'en'"
p231
ssS'etype'
p232
S"<type 'exceptions.ValueError'>"
p233
sS'date'
p234
S'Fri Feb 25 15:03:41 2011'
p235
sS'response'
p236
(dp237
S'_vars'
p238
S'None'
p239
sg68
S"<SimpleCookie: session_id_a='127.0.0.1-f2e57fa8-0a88-4de1-aaaa-9f6c08244d71'>"
p240
sS'links'
p241
S"[['web2py', 'http://www.web2py.com', 1], ['Python', 'http://www.python.org', 2], ['DePaul CTI', 'http://www.cs.depaul.edu', 3], ['DePaul University', 'http://www.depaul.edu', 5], ['downloads', '/a/default/page/32', 15], ['media / picasa / gallery', '/a/media/picasa/gallery', 16], ['manage media / manage picasa albums / manage photos', '/a/media/picasa/albums', 17], ['setup, application initialization', '/a/setup', 18], ['twitter', '/a/media/social/twitter', 19]]"
p242
sS'posts'
p243
S'<gluon.dal.Rows object at 0x9eb95ac>'
p244
sS'themes'
p245
S"['0', '1', 'cms', 'pypress', 'wordpress']"
p246
sS'theme_stylesheet'
p247
S'None'
p248
sS'meta'
p249
S'<Storage {}>'
p250
sS'_view_environment'
p251
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0xa0a75cc>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p252
sS'keywords'
p253
S"'blog, weblog, journal, web, log, web2py, pypress...straight-forward, direct, programming, programmer'"
p254
sS'files'
p255
S'[]'
p256
sS'last_posts'
p257
S"[['nn : bayesian classifer', datetime.datetime(2011, 2, 18, 12, 7, 56), <gluon.html.XML object at 0x9fab8cc>], ['cms_home', datetime.datetime(2011, 2, 6, 13, 1, 36), <gluon.html.XML object at 0x9fab98c>], ['cms_help', datetime.datetime(2011, 2, 6, 13, 1, 36), <gluon.html.XML object at 0x9fab2ac>], ['test', datetime.datetime(2011, 1, 14, 14, 59, 41), <gluon.html.XML object at 0x9fab76c>], ['acknowledgements', datetime.datetime(2011, 1, 2, 10, 41, 29), <gluon.html.XML object at 0x9fabb4c>]]"
p258
sS'title'
p259
S'"molhokwai.net - \'a\' cm/dms"'
p260
sS'home_page'
p261
S"<Row {'post_text_TCode': 'page_id_24', 'post_att...elete_record': <function <lambda> at 0x9f7e9cc>}>"
p262
sS'menu'
p263
S"[['home', False, '/a/default/page/16']]"
p264
sS'flash'
p265
S"<lazyT 'Theme not found'>"
p266
sS'theme'
p267
S"'0'"
p268
sS'session_id_name'
p269
S"'session_id_a'"
p270
sS'_custom_commit'
p271
S'None'
p272
sS'session_filename'
p273
S"'/home/herve/development/workspaces/molhokwai.net...ns/127.0.0.1-f2e57fa8-0a88-4de1-aaaa-9f6c08244d71'"
p274
sg51
S'<cStringIO.StringO object at 0x9d14560>'
p275
sS'description'
p276
S'"molhokwai.net - \'a\' cm/dms, lightweight, simple, straight & direct"'
p277
sS'session_file'
p278
S"<open file '/home/herve/development/workspaces/m...4de1-aaaa-9f6c08244d71', mode 'rb+' at 0xa089578>"
p279
sS'_caller'
p280
S'<function <lambda> at 0x9ec9d14>'
p281
sS'_custom_rollback'
p282
S'None'
p283
sS'pages'
p284
S"[['beliefs', False, '/a/default/page/15'], ['home', False, '/a/default/page/16'], ['community', False, '/a/default/page/18'], ['SMS', False, '/a/default/page/21'], ['', False, '/a/default/page/23'], ['a_home', False, '/a/default/page/24'], ['a_help', False, '/a/default/page/26'], ['help', False, '/a/default/page/27'], ['a_home', False, '/a/default/page/29'], ['siblos', False, '/a/default/page/30'], ['dev', False, '/a/default/page/31'], ['downloads', False, '/a/default/page/32'], ['themes', False, '/a/default/page/35'], ['acknowledgements', False, '/a/default/page/37'], ['test', False, '/a/default/page/38']]"
p285
sS'categories'
p286
S"[['misc', 2, '/a/default/category/misc'], ['message', 1, '/a/default/category/message']]"
p287
sS'name'
p288
S'"\'a\' cm/dms"'
p289
sS'auth_users'
p290
S'<gluon.dal.Rows object at 0x9e0c18c>'
p291
sS'help_page'
p292
S"<Row {'post_text_TCode': 'page_id_26', 'post_att...elete_record': <function <lambda> at 0x9f7ea74>}>"
p293
sS'session_id'
p294
S"'127.0.0.1-f2e57fa8-0a88-4de1-aaaa-9f6c08244d71'"
p295
sS'headers'
p296
S"<Storage {'Expires': 'Fri, 25 Feb 2011 14:03:41 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p297
sS'status'
p298
S'200'
p299
sS'postprocessing'
p300
S'[]'
p301
sS'base_theme'
p302
S'None'
p303
sS'view'
p304
S"'default/manage.html'"
p305
ssS'locals'
p306
(dp307
S'f_v'
p308
S"<Storage {'theme_stylesheet_url': 'http://localh...theme_base': '0', 'theme_name': 'test', 'id': 2}>"
p309
sssS'traceback'
p310
S'Traceback (most recent call last):\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py", line 582, in <module>\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/tools.py", line 2292, in f\n    return action(*a, **b)\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py", line 414, in manage\n    log_wrapped(\'get_theme(form.vars)\', get_theme(form.vars))\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py", line 412, in get_theme\n    return \'s%:s%:s%:%s\' % (f_v.theme_name,f_v.theme_base,f_v.theme_stylesheet_url,auth.user.email)\nValueError: unsupported format character \':\' (0x3a) at index 2\n'
p311
s.