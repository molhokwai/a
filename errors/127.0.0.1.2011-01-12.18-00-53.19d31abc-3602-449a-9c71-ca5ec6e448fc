(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py'
p4
sS'code'
p5
S'from gluon.tools.html import *\n\n###################################\n## CONTROLLER INITIALIZATION\n###################################    \nexec(\'from applications.%s.modules import common\' % this_app)\npage_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_config, app_details)\n\n# media_photos module\nexec(\'from applications.%s.modules import media_photos\' % this_app)\n\n###################################\n## CONTROLLER FUNCTIONS\n###################################    \n\n# The main page\ndef index():\n    redirect(URL(r=request, f=\'picasa\', args=\'gallery\'))\n    return dict(nake=None)\n\n# Picasa\ndef picasa():\n    area = \'gallery\'\n    if len(request.args)>0:\n        area=request.args[0]\n\n    try:\n        picasa_manager = media_photos.Manage(app_config)\n        if auth.user and auth.user.is_admin:\n            if area in [\'upload\', \'albums\', \'add\', \'edit\', \'delete\'] and not session.gdata_user:\n                session.redirect_url=URL(r=request, f=\'picasa\', args=[area])\n                redirect(URL(r=request, f=\'picasa\', args=[\'login\']))\n            else:\n                picasa_manager = media_photos.Manage(app_config, gdata_user=None, session=session)\n        \n            if area == \'login\':\n                form=FORM(INPUT(_type=\'email\', _name=\'email\', value=auth.user.email),\n                            INPUT(_type=\'password\', _name=\'password\'),\n                            INPUT(_type=\'submit\', _value=T(\'submit\'))\n                )\n                if form.accepts(request.vars, session):\n                    try:\n                        gdata_user={\n                            \'email\' : request.vars.email,\n                            \'password\' : request.vars.password\n                        }\n                        # programmatic login encapsulated in construction\n                        media_photos.Manage(app_config, gdata_user=gdata_user)\n                        session.gdata_user=gdata_user\n        \n                        session.flash = T(\'Login successfull\')\n                        if session.redirect_url:\n                            redirect(session.redirect_url)\n                        else:\n                            redirect(URL(r=request, args=[\'albums\']))\n                    except Exception, ex:\n                        log_wrapped(\'Error\', ex)\n                return dict(nake=None, area=area, form=form, item=\'user\')\n                \n            if area in [\'add\', \'edit\', \'delete\', \'upload\']:\n                # item : album || picture\n                item=request.args[1]\n    \n                if item==\'album\':\n                    if area == \'add\':\n        \n                        form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\'), \n                                        TEXTAREA(_name=\'summary\'),\n                                        INPUT(_type=\'submit\', _value=T(\'submit\'))\n                                      )\n                                )\n                        if form.accepts(request.vars, session):\n                            if area == \'add\':\n                                try:\n                                    album = picasa_manager.client.InsertAlbum(title=request.vars.title, summary=request.vars.summary)\n                                    session.flash = T(\'Album successfully added\')\n                                    redirect(URL(r=request, args=[\'albums\']))\n                                except Exception, ex:\n                                    log_wrapped(\'Error\', ex)\n                                    response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n        \n                        return dict(nake=None, area=area, form=form, item=item)\n        \n                    elif area == \'edit\':\n                        album_id=request.args[2]\n                        album_feed=picasa_manager.get_album_by_id(album_id)\n                        album_photos=picasa_manager.get_album_photos(\n                                            album_id, \n                                            username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                            limit=10\n                                            )\n        \n                        form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\', _value=album_feed.title.text), \n                                        TEXTAREA(_name=\'summary\',  value=album_feed.summary.text),\n                                        INPUT(_type=\'submit\', _value=T(\'submit\'))\n                                      )\n                                )\n                        if form.accepts(request.vars, session):\n                                try:\n                                    album_feed.title.text=request.vars.title\n                                    album_feed.summary.text=request.vars.summary\n                \n                                    updated_album = picasa_manager.client.Put(album_feed, album_feed.GetEditLink().href, converter=gdata.photos.AlbumEntryFromString)\n                                    session.flash = T(\'Album successfully updated\')\n                                    redirect(URL(r=request, args=[\'albums\']))\n                                except Exception, ex:\n                                    log_wrapped(\'Error\', ex)\n                                    response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n        \n                        return dict(nake=None, area=area, form=form, item=item, album=album_photos, album_id=album_id)\n        \n                    elif area == \'delete\':\n                        album_id=request.args[2]\n                        album_feed=picasa_manager.get_album_by_id(album_id)\n                        album_photos=picasa_manager.get_album_photos(\n                                          album_id, \n                                          username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                          limit=10\n                                          )\n        \n                        form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\', _value=album_feed.title.text), \n                                        TEXTAREA(_name=\'summary\',  value=album_feed.summary.text),\n                                        INPUT(_type=\'submit\', _value=T(\'delete\'))\n                                      )\n                                )\n                        if form.accepts(request.vars, session):\n                            try:\n                                picasa_manager.client.Delete(album_feed)\n                                session.flash = T(\'Album deleted\')\n                                redirect(URL(r=request, args=[\'albums\']))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n        \n                        return dict(nake=None, area=area, form=form, item=item, album=album_photos, album_id=album_id)\n    \n                elif item==\'picture\':\n    \n                    if area == \'upload\':\n                        upload_nr=5\n                        album_id=request.args[2]\n                        album_url = \'/data/feed/api/user/%s/albumid/%s\' % (session.gdata_user[\'email\'], album_id)\n        \n                        form=FORM()\n                        for i in range(upload_nr):\n                            form.append(DIV(INPUT(_type=\'file\', _name=\'file_%i\' % i), \n                                            INPUT(_type=\'text\', _name=\'title_%i\' % i))\n                            )\n                        form.append(INPUT(_type=\'submit\', _value=T(\'submit\')))\n                        if form.accepts(request.vars, session):\n                            import gluon.contenttype as contenttype\n                            _exceptions=[]\n                            _file_tuples=[]\n                            for i in range(upload_nr):\n                                _file,filename,filetitle=None,\'\',\'\'\n                                for v in request.post_vars:\n                                    if v==\'file_%i\' % i:\n                                        try: \n                                            _file=request.post_vars[v].file\n                                            filename=request.post_vars[v].filename\n                                        except Exception, ex: log_wrapped(\'exception\', ex)\n    \n                                    elif v==\'title_%i\' % i:\n                                        filetitle=request.post_vars[v]\n    \n                                if _file:\n                                    if not filetitle:\n                                        if filename.find(\'\\\\\')>0: f_n_s=filename.split(\'\\\\\')\n                                        else: f_n_s=filename.split(\'/\')\n                                        filetitle=f_n_s[len(f_n_s)-1]\n                                    _file_tuples.append((_file, filename, filetitle))\n    \n                            for i in range(len(_file_tuples)):\n                                try:\n                                    photo = picasa_manager.client.InsertPhotoSimple(album_url, _file_tuples[i][2],\n                                                                    \'Uploaded using the API\', _file_tuples[i][0], \n                                                                    content_type=contenttype.contenttype(_file_tuples[i][1]))\n                                except Exception, ex:\n                                    _exceptions.append(ex)\n                                    \n                            if len(_exceptions)>0:\n                                response.flash=T(\'There were %i errors during the upload(s): %s\' % (len(_exceptions), str(_exceptions)))\n                                log_wrapped(\'exceptions\', str(_exceptions))\n                            else:\n                                redirect(URL(r=request, f=\'picasa\', args=[\'album\', album_id]))\n        \n                        return dict(nake=None, area=area, form=form, item=item)\n    \n                    elif area == \'edit\':\n                        photo_id, album_id=request.args[2], request.args[3]\n                        photo=picasa_manager.get_album_photo_by_id(\n                                            album_id, photo_id, \n                                            username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                            raw_feed=True\n                                            )\n                        picasa_manager.initialize_photo_metadata(photo)\n        \n                        form=FORM(\n                                DIV(LABEL(T(\'title\')), INPUT(_type=\'text\', _name=\'title\', _value=photo.title.text)),\n                                DIV(LABEL(T(\'summary\')), TEXTAREA(_name=\'summary\', value=photo.summary.text)),\n                                DIV(LABEL(T(\'keywords\')), INPUT(_type=\'text\', _name=\'keywords\', _value=photo.media.keywords.text)),\n                                DIV(LABEL(XML(\'&nbsp;\')), INPUT(_type=\'submit\', _value=T(\'submit\')))\n                            )\n                        if form.accepts(request.vars, session):\n                            try:\n                                photo.title.text = request.vars.title\n                                photo.summary.text = request.vars.summary\n                                photo.media.keywords.text = request.vars.keywords\n                                updated_photo = picasa_manager.client.UpdatePhotoMetadata(photo)\n                                \n                                session.flash = T(\'Photo successfully updated\')\n                                redirect(URL(r=request, args=[\'edit\', \'album\', album_id]))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n    \n                        return dict(nake=None, area=area, form=form, item=item, photo=photo)\n        \n                    elif area == \'delete\':                        \n                        photo_id, album_id=request.args[2], request.args[3]\n                        photo=picasa_manager.get_album_photo_by_id(\n                                            album_id, photo_id, \n                                            username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                            raw_feed=True\n                                            )\n                        form=FORM(\n                                DIV(LABEL(T(\'title\')), INPUT(_type=\'text\', _name=\'title\', _value=photo.title.text)),\n                                DIV(LABEL(T(\'summary\')), TEXTAREA(_name=\'summary\', value=photo.summary.text)),\n                                DIV(LABEL(T(\'keywords\')), INPUT(_type=\'text\', _name=\'keywords\', _value=photo.media.keywords.text)),\n                                DIV(LABEL(XML(\'&nbsp;\')), INPUT(_type=\'submit\', _value=T(\'delete\')))\n                            )\n                        if form.accepts(request.vars, session):\n                            try:\n                                picasa_manager.client.Delete(photo)\n                                session.flash = T(\'Photo deleted\')\n                                redirect(URL(r=request, args=[\'edit\', \'album\', album_id]))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n    \n                        return dict(nake=None, area=area, form=form, item=item, photo=photo)\n    \n    \n            elif area == \'albums\':\n                albums_feed=picasa_manager.get_albums_feed()\n                \n                form=DIV()\n                albums=TABLE(TR(TH(T(\'title\')), TH(T(\'nr of pictures\')), TH(), TH(), TH(), TH()))\n                for entry in albums_feed:\n                    albums.append(TR(\n                                        TD(entry.title.text),\n                                        TD(entry.numphotos.text),\n                                        TD(A(T(\'view\'), _href=URL(r=request, args=[\'album\', entry.gphoto_id.text]))), \n                                        TD( A(T(\'edit\'), _href=URL(r=request, args=[\'edit\', \'album\', entry.gphoto_id.text]))),\n                                        TD( A(T(\'delete\'), _href=URL(r=request, args=[\'delete\', \'album\', entry.gphoto_id.text]))),\n                                        TD( A(T(\'upload to\'), _href=URL(r=request, args=[\'upload\', \'picture\',  entry.gphoto_id.text]))),\n                                    )\n                            )\n                form.append(A(T(\'add\'), _class=\'display-block width100pc text-alignr\', _href=URL(r=request, args=[\'add\', \'album\'])))\n                form.append(albums)\n                return dict(nake=None, area=area, form=form, item=None)\n    \n    ## PUBLIC SECTION\n        if area == \'gallery\':\n            log_wrapped(\'request.args[0]\', request.args[0])\n            recent=picasa_manager.get_recent_photos()\n            gallery=picasa_manager.get_album_gallery()\n            return dict(nake=None, area=area, item=None, recent=recent, gallery=gallery)\n            \n        if area == \'album\':\n            album_id=request.args[1]\n            album=picasa_manager.get_album_photos(album_id)\n            return dict(nake=None, area=area, item=None, album=album, album_id=album_id)\n            \n        elif area == \'slideshow\':\n            album_id=request.args[1]\n            album=picasa_manager.get_album_photos(album_id)\n            if not session.current_photo or int(session.current_photo)>len(album)-1:\n                session.current_photo=0\n            photo=album[int(session.current_photo)]\n            session.current_photo+=1\n            response.refresh=\'<meta http-equiv="refresh" content="%i;%s" />\' % (2, URL(r=request, args=[\'slideshow\', album_id]))\n            return dict(nake=True, area=area, item=None, photo=photo, album_id=album_id)\n    \n    except Exception, ex:\n        log_wrapped(\'Exception\', ex)\n        if str(ex).lower().find(\'unknown user\')>=0:\n            session.flash = T(\'User is unknown by the Google Photos (Picasa) Service. User must be registered there: %(picasa_link)s\', \n                                dict(picasa_link=\'http://picasaweb.google.com\'))\n        if str(ex).lower().find(\'captcha required\')>=0:\n            session.flash = T(\'User credentials are unknown to the Google Photos (Picasa) Service. User should be modified by an administrator, in service setup.\')\n        redirect(URL(r=request, c=\'default\', f=\'error\'))\n\ndef social():\n    area = \'twitter\'\n    sub_area=None\n    _items=[]\n    if request.args[0] == \'twitter\':\n        exec(\'from applications.%s.modules import twitter\' % request.application)\n        try:\n            if len(request.args)>1:\n                sub_area = request.args[1]\n                if sub_area == \'user\':\n                    api_config=db(db.app_config.id>0).select()[0].TWITTER_API\n                    _username=api_config[0]\n                    _hashes=api_config[2]\n                    twitter = twitter.Manager(_username, _hashes=_hashes)\n                    _items = twitter.get_user_tweets()\n            else:\n                api_config=db(db.app_config.id>0).select()[0].TWITTER_API\n                _username=api_config[0]\n                _hashes=api_config[2]\n                twitter = twitter.Manager(_username)\n                _items = twitter.search_tweets(_hashes, log_wrapped)\n                \n        except Exception, ex:\n            if str(ex).lower().find(str(\'No JSON object could be decoded\').lower())>=0:\n                response.flash=T(\'No tweets for username and/or hash found (error: %(err)s)\', dict(err=str(ex)))\n            else:\n                response.flash=T(\'Error occured: : %(err)s\', dict(err=str(ex)))\n\n    return dict(nake=False, area=area, sub_area=sub_area, items=_items)\n\nresponse._vars=response._caller(social)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.ImportError object at 0xac70d0c>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.ImportError object at 0xac70d0c>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.ImportError object at 0xac70d0c>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.ImportError object at 0xac70d0c>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.ImportError object at 0xac70d0c>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.ImportError object at 0xac70d0c>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.ImportError object at 0xac70d0c>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.ImportError object at 0xac70d0c>"
p26
sS'args'
p27
S"('No module named html',)"
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.ImportError object at 0xac70d0c>"
p30
sS'__class__'
p31
S"<type 'exceptions.ImportError'>"
p32
sS'__delattr__'
p33
S"<method-wrapper '__delattr__' of exceptions.ImportError object at 0xac70d0c>"
p34
sS'__repr__'
p35
S"<method-wrapper '__repr__' of exceptions.ImportError object at 0xac70d0c>"
p36
sS'__dict__'
p37
S'{}'
p38
sS'__doc__'
p39
S'"Import can\'t find module, or can\'t find name in module."'
p40
sS'__init__'
p41
S"<method-wrapper '__init__' of exceptions.ImportError object at 0xac70d0c>"
p42
sS'__new__'
p43
S'<built-in method __new__ of type object at 0x8239440>'
p44
ssS'evalue'
p45
S'No module named html'
p46
sS'request'
p47
(dp48
S'function'
p49
S"'social'"
p50
sS'body'
p51
S'<cStringIO.StringO object at 0xa6dd0a0>'
p52
sS'wsgi'
p53
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p54
sS'extension'
p55
S"'html'"
p56
sS'vars'
p57
S'<Storage {}>'
p58
sS'cid'
p59
S'None'
p60
sS'url'
p61
S'<gluon.html.XML object at 0xa6ddc8c>'
p62
sS'raw_extension'
p63
S'None'
p64
sg27
S"['twitter']"
p65
sS'controller'
p66
S"'media'"
p67
sS'cookies'
p68
S"<SimpleCookie: session_id_a='127.0.0.1-76250500-...c4fd76-048f-4688-8653-aa55bd9624a8' theme='blue'>"
p69
sS'application'
p70
S"'a'"
p71
sS'ajax'
p72
S'False'
p73
sS'client'
p74
S"'127.0.0.1'"
p75
sS'env'
p76
S"<Storage {'wsgi_multithread': True, 'http_accept...nput': <socket._fileobject object at 0xa8cb6f4>}>"
p77
sS'raw_args'
p78
S"'twitter'"
p79
sS'get_vars'
p80
S'<Storage {}>'
p81
sS'folder'
p82
S"'/home/herve/development/workspaces/molhokwai.net/web/applications/a/'"
p83
sS'now'
p84
S'datetime.datetime(2011, 1, 12, 18, 0, 53, 924245)'
p85
sS'post_vars'
p86
S'<Storage {}>'
p87
ssS'frames'
p88
(lp89
(dp90
S'file'
p91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py'
p92
sS'dump'
p93
(dp94
S'environment'
p95
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0xa63be0c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p96
sS'ccode'
p97
S'<code object <module> at 0xa931f08, file "/home/...web/applications/a/controllers/media.py", line 1>'
p98
ssS'lnum'
p99
I188
sS'lines'
p100
(dp101
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p102
sI183
S'        if type(code) == types.CodeType:'
p103
sI184
S'            ccode = code'
p104
sI185
S'        else:'
p105
sI186
S'            ccode = compile2(code,layer)'
p106
sI187
S''
sI188
S'        exec ccode in environment'
p107
sI189
S'    except HTTP:'
p108
sI190
S'        raise'
p109
sI191
S'    except Exception:'
p110
ssS'call'
p111
S"(code='from gluon.tools.html import *\\n\\n################..._items)\\n\\nresponse._vars=response._caller(social)\\n', environment={'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0xa63be0c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}, layer='/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py')"
p112
sS'func'
p113
S'restricted'
p114
sa(dp115
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py'
p116
sg93
(dp117
S'gluon'
p118
S'undefined'
p119
ssg99
I1
sg100
(dp120
I2
S''
sI3
S'###################################'
p121
sI4
S'## CONTROLLER INITIALIZATION'
p122
sI5
S'###################################'
p123
sI6
S"exec('from applications.%s.modules import common' % this_app)"
p124
sI7
S'page_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_config, app_details)'
p125
sI8
S''
sI9
S'# media_photos module'
p126
sI10
S"exec('from applications.%s.modules import media_photos' % this_app)"
p127
sI11
S''
ssg111
S'()'
p128
sg113
S'<module>'
p129
sasS'pyver'
p130
S'Python 2.5.1: /usr/local/bin/python'
p131
sS'session'
p132
(dp133
S'user_authorization_done'
p134
S'True'
p135
sS'_formkey[app_config_1]'
p136
S"'a8967d4c-93bb-412c-ae6b-f3b3a5f42906'"
p137
sS'flash'
p138
S'None'
p139
sS'_formkey[links_create]'
p140
S"'f8e43d71-2aab-48dd-ac0f-6301d2985ea9'"
p141
sS'auth'
p142
S"<Storage {'expiration': 3600, 'user': <Storage {...1, 1, 12, 18, 0, 53, 924245), 'remember': False}>"
p143
sS'authorized'
p144
g135
ssS'etype'
p145
S"<type 'exceptions.ImportError'>"
p146
sS'date'
p147
S'Wed Jan 12 18:00:53 2011'
p148
sS'response'
p149
(dp150
S'status'
p151
S'200'
p152
sg51
S'<cStringIO.StringO object at 0xa890e60>'
p153
sg68
S"<SimpleCookie: session_id_a='127.0.0.1-76250500-f357-4eb7-95d6-602a5ce036a8'>"
p154
sS'_vars'
p155
S'None'
p156
sS'session_file'
p157
S"<open file '/home/herve/development/workspaces/m...4eb7-95d6-602a5ce036a8', mode 'rb+' at 0xa905968>"
p158
sS'flash'
p159
S"''"
p160
sS'_custom_rollback'
p161
S'None'
p162
sS'session_id'
p163
S"'127.0.0.1-76250500-f357-4eb7-95d6-602a5ce036a8'"
p164
sS'headers'
p165
S"<Storage {'Expires': 'Wed, 12 Jan 2011 17:00:53 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p166
sS'meta'
p167
S'<Storage {}>'
p168
sS'session_filename'
p169
S"'/home/herve/development/workspaces/molhokwai.net...ns/127.0.0.1-76250500-f357-4eb7-95d6-602a5ce036a8'"
p170
sS'postprocessing'
p171
S'[]'
p172
sS'menu'
p173
S'[]'
p174
sS'_view_environment'
p175
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0xa63be0c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p176
sS'session_id_name'
p177
S"'session_id_a'"
p178
sS'_custom_commit'
p179
S'None'
p180
sS'_caller'
p181
S'<function <lambda> at 0xa9f36f4>'
p182
sS'files'
p183
S'[]'
p184
sS'view'
p185
S"'media/social.html'"
p186
ssS'locals'
p187
(dp188
S'protocol'
p189
S"'http'"
p190
sS'app_details'
p191
S'<__builtin__.AppDetails instance at 0xac70acc>'
p192
sS'Service'
p193
S"<class 'gluon.tools.Service'>"
p194
sS'OBJECT'
p195
S"<class 'gluon.html.OBJECT'>"
p196
sS'SQLDB'
p197
S"<class 'gluon.dal.DAL'>"
p198
sg132
S"<Storage {'user_authorization_done': True, '_for...24245), 'remember': False}>, 'authorized': True}>"
p199
sS'LINK'
p200
S"<class 'gluon.html.LINK'>"
p201
sS'BR'
p202
S"<class 'gluon.html.BR'>"
p203
sS'local_import'
p204
S'<function <lambda> at 0xa92425c>'
p205
sS'OPTGROUP'
p206
S"<class 'gluon.html.OPTGROUP'>"
p207
sS'expressions'
p208
S'{\'rel_url_and_end_tags_find\': [\'[0-9]{0,1}/[-A-Za-z0-9_\\\\$\\\\.\\\\+\\\\!\\\\*\\\\(\\\\),;:@&=\\\\?/~\\\\#\\\\%]*[^]\\\'\\\\.}>\\\\),\\\\"]\'], \'url_find\': [\'([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}|...z0-9_\\\\$\\\\.\\\\+\\\\!\\\\*\\\\(\\\\),;:@&=\\\\?/~\\\\#\\\\%]*[^]\\\'\\\\.}>\\\\),\\\\"]\', r\'([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|...ww|ftp)[-A-Za-z0-9]*\\.)[-A-Za-z0-9\\.]+)(:[0-9]*)?\', r\'(~/|/|\\./)([-A-Za-z0-9_\\$\\.\\+\\!\\*\\(\\),;:@&=\\?/~\\#\\%]|\\\\)+\', r"\'\\<((mailto:)|)[-A-Za-z0-9\\.]+@[-A-Za-z0-9\\.]+"]}'
p209
sS'link_labels'
p210
S"{'link_title': 'Name', 'link_url': 'URL'}"
p211
sS'PRE'
p212
S"<class 'gluon.html.PRE'>"
p213
sS'IS_INT_IN_RANGE'
p214
S"<class 'gluon.validators.IS_INT_IN_RANGE'>"
p215
sS'IS_LOWER'
p216
S"<class 'gluon.validators.IS_LOWER'>"
p217
sS'IS_STRONG'
p218
S"<class 'gluon.validators.IS_STRONG'>"
p219
sS'geocode'
p220
S'<function geocode at 0xa610a3c>'
p221
sS'Recaptcha'
p222
S"<class 'gluon.tools.Recaptcha'>"
p223
sS'cache'
p224
S'<gluon.cache.Cache object at 0xa6ddbec>'
p225
sS'IS_IN_DB'
p226
S"<class 'gluon.validators.IS_IN_DB'>"
p227
sS'TAG'
p228
S'<gluon.html.__TAG__ object at 0x57c1cc>'
p229
sS'SQLField'
p230
S"<class 'gluon.dal.Field'>"
p231
sS'BODY'
p232
S"<class 'gluon.html.BODY'>"
p233
sS'IS_DATE_IN_RANGE'
p234
S"<class 'gluon.validators.IS_DATE_IN_RANGE'>"
p235
sS'IFRAME'
p236
S"<class 'gluon.html.IFRAME'>"
p237
sS'URL'
p238
S'<function _URL at 0xa924fb4>'
p239
sS'db'
p240
S"<DAL {'auth_permission': <Table {'ALL': <gluon.d..._name': <gluon.dal.Field object at 0xac7a3cc>}>}>"
p241
sS'auth'
p242
S'<gluon.tools.Auth object at 0xaae9b0c>'
p243
sS'P'
S"<class 'gluon.html.P'>"
p244
sS'TFOOT'
p245
S"<class 'gluon.html.TFOOT'>"
p246
sS'XHTML'
p247
S"<class 'gluon.html.XHTML'>"
p248
sS'datetime'
p249
S"<module 'datetime' from '/usr/local/lib/python2.5/lib-dynload/datetime.so'>"
p250
sS'ON'
p251
g135
sS'OL'
p252
S"<class 'gluon.html.OL'>"
p253
sS'TEXTAREA'
p254
S"<class 'gluon.html.TEXTAREA'>"
p255
sS'MENU'
p256
S"<class 'gluon.html.MENU'>"
p257
sS'a_convert'
p258
S'<__builtin__.aConvert instance at 0xac7042c>'
p259
sS'EM'
p260
S"<class 'gluon.html.EM'>"
p261
sS'CODE'
p262
S"<class 'gluon.html.CODE'>"
p263
sS'HTTP'
p264
S"<class 'gluon.http.HTTP'>"
p265
sS'url_finders'
p266
S'[<_sre.SRE_Pattern object at 0xa675020>, <_sre.SRE_Pattern object at 0xa66a868>, <_sre.SRE_Pattern object at 0xa62dbd8>, <_sre.SRE_Pattern object at 0xa8732f0>]'
p267
sS'log_wrapped'
p268
S'<function log_wrapped at 0xab1d3e4>'
p269
sS'HR'
p270
S"<class 'gluon.html.HR'>"
p271
sS'comment_labels'
p272
S"{'comment_author': 'Name', 'comment_author_email': 'Email', 'comment_author_website': 'Website', 'comment_text': 'Comment', 'post_id': 'Post ID'}"
p273
sS'IS_DATETIME'
p274
S"<class 'gluon.validators.IS_DATETIME'>"
p275
sS'STYLE'
p276
S"<class 'gluon.html.STYLE'>"
p277
sS'LABEL'
p278
S"<class 'gluon.html.LABEL'>"
p279
sS'cat_labels'
p280
S"{'category_name': 'Name'}"
p281
sS'META'
p282
S"<class 'gluon.html.META'>"
p283
sS'print_wrapped'
p284
S'<function print_wrapped at 0xab1da74>'
p285
sS'SELECT'
p286
S"<class 'gluon.html.SELECT'>"
p287
sS'CENTER'
p288
S"<class 'gluon.html.CENTER'>"
p289
sS'prettydate'
p290
S'<function prettydate at 0xa611064>'
p291
sS'Crud'
p292
S"<class 'gluon.tools.Crud'>"
p293
sS'Auth'
p294
S"<class 'gluon.tools.Auth'>"
p295
sS'__builtins__'
p296
S"{'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'BaseException': <type 'exceptions.BaseException'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'EOFError': <type 'exceptions.EOFError'>, 'Ellipsis': Ellipsis, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, 'Exception': <type 'exceptions.Exception'>, 'False': False, ...}"
p297
sS'IS_LIST_OF'
p298
S"<class 'gluon.validators.IS_LIST_OF'>"
p299
sS'SQLFORM'
p300
S"<class 'gluon.sqlhtml.SQLFORM'>"
p301
sS'file_labels'
p302
S"{'file': 'File', 'filename': 'Enter file name'}"
p303
sS'LOAD'
p304
S'<gluon.compileapp.LoadFactory object at 0xaae980c>'
p305
sS'redirect'
p306
S'<function redirect at 0x9b125c>'
p307
sS'FIELDSET'
p308
S"<class 'gluon.html.FIELDSET'>"
p309
sS'IS_EQUAL_TO'
p310
S"<class 'gluon.validators.IS_EQUAL_TO'>"
p311
sS'embed64'
p312
S'<function embed64 at 0x57aaac>'
p313
sS'INPUT'
p314
S"<class 'gluon.html.INPUT'>"
p315
sS'EMBED'
p316
S"<class 'gluon.html.EMBED'>"
p317
sS'FORM'
p318
S"<class 'gluon.html.FORM'>"
p319
sS'H2'
p320
S"<class 'gluon.html.H2'>"
p321
sS'H3'
p322
S"<class 'gluon.html.H3'>"
p323
sS'H1'
p324
S"<class 'gluon.html.H1'>"
p325
sS'H6'
p326
S"<class 'gluon.html.H6'>"
p327
sS'H4'
p328
S"<class 'gluon.html.H4'>"
p329
sS'H5'
p330
S"<class 'gluon.html.H5'>"
p331
sS'UL'
p332
S"<class 'gluon.html.UL'>"
p333
sS'IS_UPPER'
p334
S"<class 'gluon.validators.IS_UPPER'>"
p335
sS'xmlescape'
p336
S'<function xmlescape at 0x57a4c4>'
p337
sS'IS_TIME'
p338
S"<class 'gluon.validators.IS_TIME'>"
p339
sS'OPTION'
p340
S"<class 'gluon.html.OPTION'>"
p341
sS'TITLE'
p342
S"<class 'gluon.html.TITLE'>"
p343
sS'CRYPT'
p344
S"<class 'gluon.validators.CRYPT'>"
p345
sS'administrators_emails'
p346
S"['molhokwai@gmail.com']"
p347
sS'IS_EMPTY_OR'
p348
S"<class 'gluon.validators.IS_EMPTY_OR'>"
p349
sS'MARKMIN'
p350
S"<class 'gluon.html.MARKMIN'>"
p351
sS'current_language'
p352
S"'en-en'"
p353
sS'this_app'
p354
S"'a'"
p355
sS'IS_EMAIL'
p356
S"<class 'gluon.validators.IS_EMAIL'>"
p357
sS'service'
p358
S'<gluon.tools.Service object at 0xaae932c>'
p359
sS'SCRIPT'
p360
S"<class 'gluon.html.SCRIPT'>"
p361
sS'AppDetails'
p362
S'<class __builtin__.AppDetails at 0xa63be0c>'
p363
sS'TABLE'
p364
S"<class 'gluon.html.TABLE'>"
p365
sS'IS_IPV4'
p366
S"<class 'gluon.validators.IS_IPV4'>"
p367
sS'IS_LENGTH'
p368
S"<class 'gluon.validators.IS_LENGTH'>"
p369
sS'XML'
p370
S"<class 'gluon.html.XML'>"
p371
sS'B'
S"<class 'gluon.html.B'>"
p372
sS'IMG'
p373
S"<class 'gluon.html.IMG'>"
p374
sS'SQLTABLE'
p375
S"<class 'gluon.sqlhtml.SQLTABLE'>"
p376
sS'IS_MATCH'
p377
S"<class 'gluon.validators.IS_MATCH'>"
p378
sS'IS_ALPHANUMERIC'
p379
S"<class 'gluon.validators.IS_ALPHANUMERIC'>"
p380
sS'SPAN'
p381
S"<class 'gluon.html.SPAN'>"
p382
sS'IS_SLUG'
p383
S"<class 'gluon.validators.IS_SLUG'>"
p384
sS'CLEANUP'
p385
S"<class 'gluon.validators.CLEANUP'>"
p386
sS'fetch'
p387
S'<function fetch at 0xa610994>'
p388
sS'IS_DATE'
p389
S"<class 'gluon.validators.IS_DATE'>"
p390
sS'Struct'
p391
S'<class __builtin__.Struct at 0xa8c8f5c>'
p392
sS'IS_NOT_EMPTY'
p393
S"<class 'gluon.validators.IS_NOT_EMPTY'>"
p394
sS'IS_FLOAT_IN_RANGE'
p395
S"<class 'gluon.validators.IS_FLOAT_IN_RANGE'>"
p396
sS'BEAUTIFY'
p397
S"<class 'gluon.html.BEAUTIFY'>"
p398
sS'TBODY'
p399
S"<class 'gluon.html.TBODY'>"
p400
sS'Field'
p401
S"<class 'gluon.dal.Field'>"
p402
sS'Mail'
p403
S"<class 'gluon.tools.Mail'>"
p404
sS'DIV'
p405
S"<class 'gluon.html.DIV'>"
p406
sS'LEGEND'
p407
S"<class 'gluon.html.LEGEND'>"
p408
sS'post_labels'
p409
S"{'post_category': 'Category', 'post_text': 'Post', 'post_text_TCode': 'Translation code (code & language texts must be set in the translation files)', 'post_time': 'Post Date', 'post_title': 'Title', 'post_type': 'Type', 'show_in_menu': 'Show in menu'}"
p410
sS'global_site_url'
p411
S"'http://localhost:8001'"
p412
sS'DAL'
p413
S"<class 'gluon.dal.DAL'>"
p414
sS'TT'
p415
S"<class 'gluon.html.TT'>"
p416
sS'TR'
p417
S"<class 'gluon.html.TR'>"
p418
sS'this_app_url'
p419
S"'http://localhost:8001/a'"
p420
sS'LI'
p421
S"<class 'gluon.html.LI'>"
p422
sS'TH'
p423
S"<class 'gluon.html.TH'>"
p424
sS'TD'
p425
S"<class 'gluon.html.TD'>"
p426
sS'PluginManager'
p427
S"<class 'gluon.tools.PluginManager'>"
p428
sS'IS_URL'
p429
S"<class 'gluon.validators.IS_URL'>"
p430
sS'A'
S"<class 'gluon.html.A'>"
p431
sS'HEAD'
p432
S"<class 'gluon.html.HEAD'>"
p433
sS'rel_url_and_end_tags_finders'
p434
S'[<_sre.SRE_Pattern object at 0xa8984f0>]'
p435
sS'IS_DATETIME_IN_RANGE'
p436
S"<class 'gluon.validators.IS_DATETIME_IN_RANGE'>"
p437
sS'HTML'
p438
S"<class 'gluon.html.HTML'>"
p439
sS'IS_IMAGE'
p440
S"<class 'gluon.validators.IS_IMAGE'>"
p441
sS'I'
S"<class 'gluon.html.I'>"
p442
sS'crud'
p443
S'<gluon.tools.Crud object at 0xaae9e6c>'
p444
sS'IS_NOT_IN_DB'
p445
S"<class 'gluon.validators.IS_NOT_IN_DB'>"
p446
sS'aConvert'
p447
S'<class __builtin__.aConvert at 0xa8c8f8c>'
p448
sS'app_config'
p449
S'<Row {\'APP_METAS\': ["molhokwai.net - \'a\' cm/dms"...elete_record\': <function <lambda> at 0xab1d1b4>}>'
p450
sg149
S"<Storage {'status': 200, 'body': <cStringIO.Stri...t': None, 'files': [], '_custom_rollback': None}>"
p451
sS'THEAD'
p452
S"<class 'gluon.html.THEAD'>"
p453
sS'IS_NULL_OR'
p454
S"<class 'gluon.validators.IS_EMPTY_OR'>"
p455
sg47
S"<Storage {'function': 'social', 'body': <cString..., 18, 0, 53, 924245), 'post_vars': <Storage {}>}>"
p456
sS'IS_EXPR'
p457
S"<class 'gluon.validators.IS_EXPR'>"
p458
sS'RPXAccount'
p459
S"<class 'gluon.contrib.login_methods.rpx_account.RPXAccount'>"
p460
sS'IS_IN_SET'
p461
S"<class 'gluon.validators.IS_IN_SET'>"
p462
sS'IS_UPLOAD_FILENAME'
p463
S"<class 'gluon.validators.IS_UPLOAD_FILENAME'>"
p464
sS'IS_DECIMAL_IN_RANGE'
p465
S"<class 'gluon.validators.IS_DECIMAL_IN_RANGE'>"
p466
sS're'
p467
S"<module 're' from '/usr/local/lib/python2.5/re.pyc'>"
p468
sS'T'
S'<gluon.languages.translator object at 0xab2ac0c>'
p469
sssS'traceback'
p470
S'Traceback (most recent call last):\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py", line 1, in <module>\n    from gluon.tools.html import *\nImportError: No module named html\n'
p471
s.