(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py'
p4
sS'code'
p5
S'###################################\n## CONTROLLER INITIALIZATION\n###################################    \nexec(\'from applications.%s.modules import common\' % this_app)\npage_helper, post_helper = common.controller_init(request, response, session, cache, T, db, auth, app_config, app_details)\n\n# media_photos module\nexec(\'from applications.%s.modules import media_photos\' % this_app)\n\n###################################\n## CONTROLLER FUNCTIONS\n###################################    \n\n# The main page\ndef index():\n    redirect(URL(r=request, f=\'picasa\', args=\'gallery\'))\n    return dict(nake=None)\n\n# Picasa\ndef picasa():\n    area = \'gallery\'\n    if len(request.args)>0:\n        area=request.args[0]\n\n    picasa_manager = media_photos.Manage(app_config)\n    if auth.user and auth.user.is_admin:\n        if area in [\'upload\', \'albums\', \'add\', \'edit\', \'delete\'] and not session.gdata_user:\n            session.redirect_url=URL(r=request, f=\'picasa\', args=[area])\n            redirect(URL(r=request, f=\'picasa\', args=[\'login\']))\n        else:\n            picasa_manager = media_photos.Manage(app_config, gdata_user=gdata_user, session=session)\n    \n        if area == \'login\':\n            form=FORM(INPUT(_type=\'email\', _name=\'email\', value=auth.user.email),\n                        INPUT(_type=\'password\', _name=\'password\'),\n                        INPUT(_type=\'submit\', _value=T(\'submit\'))\n            )\n            if form.accepts(request.vars, session):\n                try:\n                    gdata_user={\n                        \'email\' : request.vars.email,\n                        \'password\' : request.vars.password\n                    }\n                    # programmatic login encapsulated in construction\n                    media_photos.Manage(app_config, gdata_user=gdata_user)\n                    session.gdata_user=gdata_user\n    \n                    session.flash = T(\'Login successfull\')\n                    if session.redirect_url:\n                        redirect(session.redirect_url)\n                    else:\n                        redirect(URL(r=request, args=[\'albums\']))\n                except Exception, ex:\n                    log_wrapped(\'Error\', ex)\n            return dict(nake=None, area=area, form=form, item=\'user\')\n            \n        if area in [\'add\', \'edit\', \'delete\', \'upload\']:\n            # item : album || picture\n            item=request.args[1]\n\n            if item==\'album\':\n                if area == \'add\':\n    \n                    form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\'), \n                                    TEXTAREA(_name=\'summary\'),\n                                    INPUT(_type=\'submit\', _value=T(\'submit\'))\n                                  )\n                            )\n                    if form.accepts(request.vars, session):\n                        if area == \'add\':\n                            try:\n                                album = picasa_manager.client.InsertAlbum(title=request.vars.title, summary=request.vars.summary)\n                                session.flash = T(\'Album successfully added\')\n                                redirect(URL(r=request, args=[\'albums\']))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n    \n                    return dict(nake=None, area=area, form=form, item=item)\n    \n                elif area == \'edit\':\n                    album_id=request.args[2]\n                    album_feed=picasa_manager.get_album_by_id(album_id)\n                    album_photos=picasa_manager.get_album_photos(\n                                        album_id, \n                                        username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                        limit=10\n                                        )\n    \n                    form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\', _value=album_feed.title.text), \n                                    TEXTAREA(_name=\'summary\',  value=album_feed.summary.text),\n                                    INPUT(_type=\'submit\', _value=T(\'submit\'))\n                                  )\n                            )\n                    if form.accepts(request.vars, session):\n                            try:\n                                album_feed.title.text=request.vars.title\n                                album_feed.summary.text=request.vars.summary\n            \n                                updated_album = picasa_manager.client.Put(album_feed, album_feed.GetEditLink().href, converter=gdata.photos.AlbumEntryFromString)\n                                session.flash = T(\'Album successfully updated\')\n                                redirect(URL(r=request, args=[\'albums\']))\n                            except Exception, ex:\n                                log_wrapped(\'Error\', ex)\n                                response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n    \n                    return dict(nake=None, area=area, form=form, item=item, album=album_photos, album_id=album_id)\n    \n                elif area == \'delete\':\n                    album_id=request.args[2]\n                    album_feed=get_album_by_id(album_id)\n                    album_photos=picasa_manager.get_album_photos(\n                                      album_id, \n                                      username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                      limit=10\n                                      )\n    \n                    form=FORM(DIV(INPUT(_type=\'text\', _name=\'title\', _value=album_feed.title.text), \n                                    TEXTAREA(_name=\'summary\',  value=album_feed.summary.text),\n                                    INPUT(_type=\'submit\', _value=T(\'delete\'))\n                                  )\n                            )\n                    if form.accepts(request.vars, session):\n                        try:\n                            picasa_manager.client.Delete(album_feed)\n                            session.flash = T(\'Album deleted\')\n                            redirect(URL(r=request, args=[\'albums\']))\n                        except Exception, ex:\n                            log_wrapped(\'Error\', ex)\n                            response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n    \n                    return dict(nake=None, area=area, form=form, item=item, album=album_photos, album_id=album_id)\n\n            elif item==\'picture\':\n\n                if area == \'upload\':\n                    upload_nr=5\n                    album_id=request.args[2]\n                    album_url = \'/data/feed/api/user/%s/albumid/%s\' % (session.gdata_user[\'email\'], album_id)\n    \n                    form=FORM()\n                    for i in range(upload_nr):\n                        form.append(DIV(INPUT(_type=\'file\', _name=\'file_%i\' % i), \n                                        INPUT(_type=\'text\', _name=\'title_%i\' % i))\n                        )\n                    form.append(INPUT(_type=\'submit\', _value=T(\'submit\')))\n                    if form.accepts(request.vars, session):\n                        import gluon.contenttype as contenttype\n                        _exceptions=[]\n                        _file_tuples=[]\n                        for i in range(upload_nr):\n                            _file,filename,filetitle=None,\'\',\'\'\n                            for v in request.post_vars:\n                                if v==\'file_%i\' % i:\n                                    try: \n                                        _file=request.post_vars[v].file\n                                        filename=request.post_vars[v].filename\n                                    except Exception, ex: log_wrapped(\'exception\', ex)\n\n                                elif v==\'title_%i\' % i:\n                                    filetitle=request.post_vars[v]\n\n                            if _file:\n                                _file_tuples.append((_file, filename, filetitle))\n\n                        for i in range(len(_file_tuples)):\n                            try:\n                                photo = picasa_manager.client.InsertPhotoSimple(album_url, _file_tuples[i][2],\n                                                                \'Uploaded using the API\', _file_tuples[i][0], \n                                                                content_type=contenttype.contenttype(_file_tuples[i][1]))\n                            except Exception, ex:\n                                _exceptions.append(ex)\n                                \n                        if len(_exceptions)>0:\n                            response.flash=T(\'There were %i errors during the upload(s): %s\' % (len(_exceptions), str(_exceptions)))\n                            log_wrapped(\'exceptions\', str(_exceptions))\n                        else:\n                            redirect(URL(r=request, f=\'picasa\', args=[\'album\', album_id]))\n    \n                    return dict(nake=None, area=area, form=form, item=item)\n\n                elif area == \'edit\':\n                    photo_id, album_id=request.args[2], request.args[3]\n                    photo=picasa_manager.get_album_photo_by_id(\n                                        album_id, photo_id, \n                                        username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                        raw_feed=True\n                                        )\n                    picasa_manager.initialize_photo_metadata(photo)\n    \n                    form=FORM(\n                            DIV(LABEL(T(\'title\')), INPUT(_type=\'text\', _name=\'title\', _value=photo.title.text)),\n                            DIV(LABEL(T(\'summary\')), TEXTAREA(_name=\'summary\', value=photo.summary.text)),\n                            DIV(LABEL(T(\'keywords\')), INPUT(_type=\'text\', _name=\'keywords\', _value=photo.media.keywords.text)),\n                            DIV(LABEL(XML(\'&nbsp;\')), INPUT(_type=\'submit\', _value=T(\'submit\')))\n                        )\n                    if form.accepts(request.vars, session):\n                        try:\n                            photo.title.text = request.vars.title\n                            photo.summary.text = request.vars.summary\n                            photo.media.keywords.text = request.vars.keywords\n                            updated_photo = picasa_manager.client.UpdatePhotoMetadata(photo)\n                            \n                            session.flash = T(\'Photo successfully updated\')\n                            redirect(URL(r=request, args=[\'edit\', \'album\', album_id]))\n                        except Exception, ex:\n                            log_wrapped(\'Error\', ex)\n                            response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n\n                    return dict(nake=None, area=area, form=form, item=item, photo=photo)\n    \n                elif area == \'delete\':                        \n                    photo_id, album_id=request.args[2], request.args[3]\n                    photo=picasa_manager.get_album_photo_by_id(\n                                        album_id, photo_id, \n                                        username=session.gdata_user[\'email\'].replace(\'@gmail.com\', \'\'), \n                                        raw_feed=True\n                                        )\n                    form=FORM(\n                            DIV(LABEL(T(\'title\')), INPUT(_type=\'text\', _name=\'title\', _value=photo.title.text)),\n                            DIV(LABEL(T(\'summary\')), TEXTAREA(_name=\'summary\', value=photo.summary.text)),\n                            DIV(LABEL(T(\'keywords\')), INPUT(_type=\'text\', _name=\'keywords\', _value=photo.media.keywords.text)),\n                            DIV(LABEL(XML(\'&nbsp;\')), INPUT(_type=\'submit\', _value=T(\'delete\')))\n                        )\n                    if form.accepts(request.vars, session):\n                        try:\n                            picasa_manager.client.Delete(photo)\n                            session.flash = T(\'Photo deleted\')\n                            redirect(URL(r=request, args=[\'edit\', \'album\', album_id]))\n                        except Exception, ex:\n                            log_wrapped(\'Error\', ex)\n                            response.flash = T(\'An error occured: %(error)s. You can retry or contact the administrator\', dict(error=str(ex)))\n\n                    return dict(nake=None, area=area, form=form, item=item, photo=photo)\n\n\n        elif area == \'albums\':\n            albums_feed=picasa_manager.get_albums_feed()\n            \n            form=DIV()\n            albums=TABLE(TR(TH(T(\'title\')), TH(T(\'nr of pictures\')), TH(), TH(), TH(), TH()))\n            for entry in albums_feed:\n                albums.append(TR(\n                                    TD(entry.title.text),\n                                    TD(entry.numphotos.text),\n                                    TD(A(T(\'view\'), _href=URL(r=request, args=[\'album\', entry.gphoto_id.text]))), \n                                    TD( A(T(\'edit\'), _href=URL(r=request, args=[\'edit\', \'album\', entry.gphoto_id.text]))),\n                                    TD( A(T(\'delete\'), _href=URL(r=request, args=[\'delete\', \'album\', entry.gphoto_id.text]))),\n                                    TD( A(T(\'upload to\'), _href=URL(r=request, args=[\'upload\', \'picture\',  entry.gphoto_id.text]))),\n                                )\n                        )\n            form.append(A(T(\'add\'), _class=\'display-block width100pc text-alignr\', _href=URL(r=request, args=[\'add\', \'album\'])))\n            form.append(albums)\n            return dict(nake=None, area=area, form=form, item=None)\n\n    ## PUBLIC SECTION                    \n    if area == \'gallery\':\n        recent=picasa_manager.get_recent_photos()\n        gallery=get_album_gallery(client)\n        return dict(nake=None, area=area, item=None, recent=recent, gallery=gallery)\n        \n    if area == \'album\':\n        album_id=request.args[1]\n        album=picasa_manager.get_album_photos(album_id)\n        return dict(nake=None, area=area, item=None, album=album, album_id=album_id)\n        \n    elif area == \'slideshow\':\n        album_id=request.args[1]\n        album=picasa_manager.get_album_photos(album_id)\n        if not session.current_photo or int(session.current_photo)>len(album)-1:\n            session.current_photo=0\n        photo=album[int(session.current_photo)]\n        session.current_photo+=1\n        response.refresh=\'<meta http-equiv="refresh" content="%i;%s" />\' % (2, URL(r=request, args=[\'slideshow\', album_id]))\n        return dict(nake=True, area=area, item=None, photo=photo, album_id=album_id)\n\nresponse._vars=response._caller(picasa)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.NameError object at 0x927376c>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.NameError object at 0x927376c>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.NameError object at 0x927376c>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.NameError object at 0x927376c>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.NameError object at 0x927376c>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.NameError object at 0x927376c>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.NameError object at 0x927376c>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.NameError object at 0x927376c>"
p26
sS'args'
p27
S'("global name \'Struct\' is not defined",)'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.NameError object at 0x927376c>"
p30
sS'__class__'
p31
S"<type 'exceptions.NameError'>"
p32
sS'__delattr__'
p33
S"<method-wrapper '__delattr__' of exceptions.NameError object at 0x927376c>"
p34
sS'__repr__'
p35
S"<method-wrapper '__repr__' of exceptions.NameError object at 0x927376c>"
p36
sS'__dict__'
p37
S'{}'
p38
sS'__doc__'
p39
S"'Name not found globally.'"
p40
sS'__init__'
p41
S"<method-wrapper '__init__' of exceptions.NameError object at 0x927376c>"
p42
sS'__new__'
p43
S'<built-in method __new__ of type object at 0x8239980>'
p44
ssS'evalue'
p45
S"global name 'Struct' is not defined"
p46
sS'request'
p47
(dp48
S'function'
p49
S"'picasa'"
p50
sS'body'
p51
S'<cStringIO.StringO object at 0x8ed6b80>'
p52
sS'wsgi'
p53
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p54
sS'extension'
p55
S"'html'"
p56
sS'vars'
p57
S'<Storage {}>'
p58
sS'cid'
p59
S'None'
p60
sS'url'
p61
S'<gluon.html.XML object at 0x912230c>'
p62
sS'raw_extension'
p63
S'None'
p64
sg27
S'[]'
p65
sS'controller'
p66
S"'media'"
p67
sS'cookies'
p68
S"<SimpleCookie: session_id_a='127.0.0.1-fbcb8fdb-...:c5be6c3c-7293-4b1b-9941-ac31ee941425' theme='1'>"
p69
sS'application'
p70
S"'a'"
p71
sS'ajax'
p72
S'False'
p73
sS'client'
p74
S"'127.0.0.1'"
p75
sS'env'
p76
S"<Storage {'wsgi_multithread': True, 'http_accept...nput': <socket._fileobject object at 0x94e4294>}>"
p77
sS'raw_args'
p78
S'None'
p79
sS'get_vars'
p80
S'<Storage {}>'
p81
sS'folder'
p82
S"'/home/herve/development/workspaces/molhokwai.net/web/applications/a/'"
p83
sS'now'
p84
S'datetime.datetime(2011, 1, 7, 11, 5, 8, 151630)'
p85
sS'post_vars'
p86
S'<Storage {}>'
p87
ssS'frames'
p88
(lp89
(dp90
S'file'
p91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py'
p92
sS'dump'
p93
(dp94
S'environment'
p95
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x90e744c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p96
sS'ccode'
p97
S'<code object <module> at 0x91b7380, file "/home/...web/applications/a/controllers/media.py", line 4>'
p98
ssS'lnum'
p99
I188
sS'lines'
p100
(dp101
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p102
sI183
S'        if type(code) == types.CodeType:'
p103
sI184
S'            ccode = code'
p104
sI185
S'        else:'
p105
sI186
S'            ccode = compile2(code,layer)'
p106
sI187
S''
sI188
S'        exec ccode in environment'
p107
sI189
S'    except HTTP:'
p108
sI190
S'        raise'
p109
sI191
S'    except Exception:'
p110
ssS'call'
p111
S"(code='###################################\\n## CONTROLLE...bum_id)\\n\\nresponse._vars=response._caller(picasa)\\n', environment={'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x90e744c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}, layer='/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py')"
p112
sS'func'
p113
S'restricted'
p114
sa(dp115
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py'
p116
sg93
(dp117
sg99
I277
sg100
(dp118
I266
S''
sI267
S"    elif area == 'slideshow':"
p119
sI268
S'        album_id=request.args[1]'
p120
sI269
S'        album=picasa_manager.get_album_photos(album_id)'
p121
sI270
S'        if not session.current_photo or int(session.current_photo)>len(album)-1:'
p122
sI271
S'            session.current_photo=0'
p123
sI272
S'        photo=album[int(session.current_photo)]'
p124
sI273
S'        session.current_photo+=1'
p125
sI274
S'        response.refresh=\'<meta http-equiv="refresh" content="%i;%s" />\' % (2, URL(r=request, args=[\'slideshow\', album_id]))'
p126
sI275
S'        return dict(nake=True, area=area, item=None, photo=photo, album_id=album_id)'
p127
ssg111
S'()'
p128
sg113
S'<module>'
p129
sa(dp130
g91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/globals.py'
p131
sg93
(dp132
S'self'
p133
S'undefined'
p134
sS'f'
S'<function picasa at 0x9380ed4>'
p135
ssg99
I95
sg100
(dp136
I96
S'        self._view_environment = None'
p137
sI97
S'        self._custom_commit = None'
p138
sI98
S'        self._custom_rollback = None'
p139
sI99
S''
sI90
S"        self.flash = ''           # used by the default view layout"
p140
sI91
S'        self.meta = Storage()     # used by web2py_ajax.html'
p141
sI92
S'        self.menu = []            # used by the default view layout'
p142
sI93
S'        self.files = []           # used by web2py_ajax.html'
p143
sI94
S'        self._vars = None'
p144
sI95
S'        self._caller = lambda f: f()'
p145
ssg111
S'(f=<function picasa at 0x9380ed4>)'
p146
sg113
S'<lambda>'
p147
sa(dp148
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py'
p149
sg93
(dp150
S'picasa_manager.get_recent_photos'
p151
S'<bound method Manage.get_recent_photos of <appli...dules.media_photos.Manage instance at 0x91ba4cc>>'
p152
sS'picasa_manager'
p153
S'<applications.a.modules.media_photos.Manage instance at 0x91ba4cc>'
p154
sS'recent'
p155
g134
ssg99
I258
sg100
(dp156
I256
S'    ## PUBLIC SECTION'
p157
sI257
S"    if area == 'gallery':"
p158
sI258
S'        recent=picasa_manager.get_recent_photos()'
p159
sI259
S'        gallery=get_album_gallery(client)'
p160
sI260
S'        return dict(nake=None, area=area, item=None, recent=recent, gallery=gallery)'
p161
sI261
S''
sI262
S"    if area == 'album':"
p162
sI253
S'            form.append(albums)'
p163
sI254
S'            return dict(nake=None, area=area, form=form, item=None)'
p164
sI255
S''
ssg111
S'()'
p165
sg113
S'picasa'
p166
sa(dp167
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/modules/media_photos.py'
p168
sg93
(dp169
S'recent.append'
p170
S'<built-in method append of list object at 0x91baa0c>'
p171
sS'photo'
p172
S'<gdata.photos.PhotoEntry object at 0x94fe8ac>'
p173
sS'global get_photo_details'
p174
S'<function get_photo_details at 0x92ee95c>'
p175
sS'recent'
p176
S'[]'
p177
ssg99
I136
sg100
(dp178
I131
S'            username=self.PICASA_USERNAME'
p179
sI132
S''
sI133
S"        photos = self.client.GetUserFeed(kind='photo', limit='10')"
p180
sI134
S'        recent=[]'
p181
sI135
S'        for photo in photos.entry:'
p182
sI136
S'            recent.append(get_photo_details(photo))'
p183
sI137
S'        return recent'
p184
sI138
S''
sI139
S'    def get_album_gallery(self, username=None, limit=100):'
p185
sI140
S'        if not username:'
p186
ssg111
S"(self=<applications.a.modules.media_photos.Manage instance at 0x91ba4cc>, username='molhokwai')"
p187
sg113
S'get_recent_photos'
p188
sa(dp189
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/modules/media_photos.py'
p190
sg93
(dp191
S'raw_feed'
p192
g134
ssg99
I94
sg100
(dp193
I96
S'        else:'
p194
sI97
S'            return filter(lambda x: x.id==photo_id, photos)[0]'
p195
sI98
S''
sI89
S'    def get_album_photo_by_id(self, album_id, photo_id, username=None, raw_feed=False):'
p196
sI90
S'        if not username:'
p197
sI91
S'            username=self.PICASA_USERNAME'
p198
sI92
S''
sI93
S'        photos=self.get_album_photos(album_id, username=username, limit=100, raw_feed=raw_feed)'
p199
sI94
S'        if raw_feed:'
p200
sI95
S'            return filter(lambda x: x.gphoto_id.text==photo_id, photos)[0]'
p201
ssg111
S'(photo=<gdata.photos.PhotoEntry object at 0x94fe8ac>)'
p202
sg113
S'get_photo_details'
p203
sasS'pyver'
p204
S'Python 2.5.1: /usr/local/bin/python'
p205
sS'session'
p206
(dp207
S'_formkey[links_16]'
p208
S"'743eddcc-bba9-46db-a0cf-59fcec5eae54'"
p209
sS'user_authorization_done'
p210
S'True'
p211
sS'_formkey[links_create]'
p212
S"'106e0948-4734-4fed-93a9-bfe5a12dc957'"
p213
sS'gdata_user'
p214
S"{'email': 'molhokwai@gmail.com', 'password': 'jamiroquai8'}"
p215
sS'_formkey[default]'
p216
S"'8ceedaad-2644-4f38-a243-d9c327abf536'"
p217
sS'flash'
p218
S'None'
p219
sS'auth'
p220
S'None'
p221
sS'authorized'
p222
g211
sS'redirect_url'
p223
S"'/a/media/picasa/albums'"
p224
sS'_formkey[app_config_create]'
p225
S"'e3fffd34-afe5-434e-8867-feb624fbea41'"
p226
ssS'etype'
p227
S"<type 'exceptions.NameError'>"
p228
sS'date'
p229
S'Fri Jan  7 11:05:10 2011'
p230
sS'response'
p231
(dp232
S'_vars'
p233
S'None'
p234
sg68
S"<SimpleCookie: session_id_a='127.0.0.1-fbcb8fdb-d998-4890-8338-2a6eb7e1d56d'>"
p235
sS'links'
p236
S"[['web2py', 'http://www.web2py.com', 1], ['Python', 'http://www.python.org', 2], ['DePaul CTI', 'http://www.cs.depaul.edu', 3], ['DePaul University', 'http://www.depaul.edu', 5], ['downloads', '/a/default/page/32', 15], ['media / picasa / gallery', '/a/media/picasa/gallery', 16], ['manage media / manage picasa albums / manage photos', '/a/media/picasa/albums', 17]]"
p237
sS'themes'
p238
S"['0', '1']"
p239
sS'meta'
p240
S'<Storage {}>'
p241
sS'anon_user'
p242
S"<Row {'auth_event': <gluon.dal.Set object at 0x9...elete_record': <function <lambda> at 0x92eecdc>}>"
p243
sS'_view_environment'
p244
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x90e744c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p245
sS'keywords'
p246
S"(<lazyT 'blog, weblog, journal, web, log, web2py,...raight-forward, direct, programming, programmer'>,)"
p247
sS'files'
p248
S'[]'
p249
sS'_caller'
p250
S'<function <lambda> at 0x91f63ac>'
p251
sS'title'
p252
S'(<lazyT "molhokwai.net - \'a\' cm/dms">,)'
p253
sS'home_page'
p254
S"<Row {'post_text_TCode': 'page_id_24', 'post_tim...elete_record': <function <lambda> at 0x90daae4>}>"
p255
sS'menu'
p256
S"[['home', False, '/a/default/page/16'], ['community', False, '/a/default/page/18']]"
p257
sS'flash'
p258
S"''"
p259
sS'theme'
p260
S"'1'"
p261
sS'session_file'
p262
S"<open file '/home/herve/development/workspaces/m...4890-8338-2a6eb7e1d56d', mode 'rb+' at 0x92ef920>"
p263
sS'_custom_commit'
p264
S'None'
p265
sS'session_filename'
p266
S"'/home/herve/development/workspaces/molhokwai.net...ns/127.0.0.1-fbcb8fdb-d998-4890-8338-2a6eb7e1d56d'"
p267
sg51
S'<cStringIO.StringO object at 0x16bfc0>'
p268
sS'description'
p269
S'<lazyT "molhokwai.net - \'a\' cm/dms, lightweight, simple, straight & direct">'
p270
sS'session_id_name'
p271
S"'session_id_a'"
p272
sS'_custom_rollback'
p273
S'None'
p274
sS'pages'
p275
S"[['beliefs', False, '/a/default/page/15'], ['home', False, '/a/default/page/16'], ['community', False, '/a/default/page/18'], ['SMS', False, '/a/default/page/21'], ['', False, '/a/default/page/23'], ['a_home', False, '/a/default/page/24'], ['a_help', False, '/a/default/page/26'], ['help', False, '/a/default/page/27'], ['a_home', False, '/a/default/page/29'], ['siblos', False, '/a/default/page/30'], ['dev', False, '/a/default/page/31'], ['downloads', False, '/a/default/page/32'], ['themes', False, '/a/default/page/35'], ['media upload', False, '/a/default/page/36'], ['acknowledgements', False, '/a/default/page/37']]"
p276
sS'categories'
p277
S"[['misc', 2, '/a/default/category/misc'], ['message', 1, '/a/default/category/message']]"
p278
sS'help_page'
p279
S"<Row {'post_text_TCode': 'page_id_26', 'post_tim...elete_record': <function <lambda> at 0x90daf44>}>"
p280
sS'session_id'
p281
S"'127.0.0.1-fbcb8fdb-d998-4890-8338-2a6eb7e1d56d'"
p282
sS'headers'
p283
S"<Storage {'Expires': 'Fri, 07 Jan 2011 10:05:08 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p284
sS'status'
p285
S'200'
p286
sS'postprocessing'
p287
S'[]'
p288
sS'auth_users'
p289
S'<gluon.dal.Rows object at 0x93f03ec>'
p290
sS'view'
p291
S"'media/picasa.html'"
p292
ssS'locals'
p293
(dp294
S'album_id'
p295
S"'5400984410168278161'"
p296
sg61
S"'http://lh6.ggpht.com/_TkyQbrFAHEw/TIy2yQSAWMI/AAAAAAAABrU/7D6o0BKSaJk/cartejardin.jpg'"
p297
sS'photo'
p298
S'<gdata.photos.PhotoEntry object at 0x94fe8ac>'
p299
sS'camera'
p300
S"'unknown'"
p301
sS'_id'
p302
S"'5515984618102216898'"
p303
sS'thumbnail_url'
p304
S"'http://lh6.ggpht.com/_TkyQbrFAHEw/TIy2yQSAWMI/AAAAAAAABrU/7D6o0BKSaJk/s72/cartejardin.jpg'"
p305
sS'_title'
p306
S"'cartejardin.png'"
p307
sssS'traceback'
p308
S'Traceback (most recent call last):\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py", line 277, in <module>\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/globals.py", line 95, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/media.py", line 258, in picasa\n    recent=picasa_manager.get_recent_photos()\n  File "applications/a/modules/media_photos.py", line 136, in get_recent_photos\n    recent.append(get_photo_details(photo))\n  File "applications/a/modules/media_photos.py", line 94, in get_photo_details\n    if raw_feed:\nNameError: global name \'Struct\' is not defined\n'
p309
s.