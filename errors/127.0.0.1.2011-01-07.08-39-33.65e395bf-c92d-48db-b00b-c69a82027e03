(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p4
sS'code'
p5
S'###################################\n## CONTROLLER INITIALIZATION\n###################################    \nexec(\'from applications.%s.modules import common\' % this_app)\npage_helper, post_helper = common.controller_init(request, response, session, cache, T, db)\n\n###################################\n## CONTROLLER FUNCTIONS\n###################################    \n# The main page\n# Shows the home page if one created (see \'home_page\' function page with title)\n# Otherwise, defaults to showing the first 10 posts\ndef index():\n    if len(request.args)==0:\n        if response.home_page:\n            redirect(URL(r = request,c=\'default\',f = \'page/%i\' % response.home_page.id))\n    else:\n      return dict(posts = app_details.start_page_html)\n\n# The post page\n# Shows the entire post, the comments, and the comment form\ndef post():\n    #try: \n    post_id = int(request.args[0])\n    post = db(db.posts.id == post_id).select()[0]\n    comments = db(db.comments.post_id == post_id).select(db.comments.ALL)\n    comment_count = len(db(db.comments.post_id == post_id).select(db.comments.ALL))\n    db.comments.post_id.default = post_id\n    comment_form = SQLFORM(db.comments, fields = [\'comment_author\', \'comment_author_email\', \'comment_author_website\', \'comment_text\'], labels = comment_labels)\n        \n    if comment_form.accepts(request.vars, session):\n        session.flash = T("Comment added.")\n        redirect(URL(r = request,f = \'post/%i\' % post_id ))\n\n    return dict(post = post, comments = comments, comment_form = comment_form, comment_count = comment_count)\n    #except: \n    #    redirect(URL(r = request,f = \'index\'))\n\n# The page page\n# Shows the entire page. Does not show comments or the comment form\ndef page():\n    try:\n        if len(request.args)>0:\n            post=\'\'\n            if a_convert.to_int(request.args[0]):\n                post = db(db.posts.id == int(request.args[0])).select()[0]\n            else:\n                post = db(db.posts.post_title == request.args[0]).select()[0]\n                        \n            nake=(request.args[len(request.args)-1]==\'nake\'\n                 or post.post_text.find(\'<!-- nake page -->\')>=0)\n        \n            return dict(post = post, nake  = nake)\n        else:\n            redirect(URL(r = request,f = \'index\'))\n    except Exception, ex: \n        session.flash=T("(Caught) Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n# The pages page\n# Shows links to all pages\ndef pages():\n    return dict(manage_title=T("pages"))\n\n# The category page\n# Shows all the posts in the requested category\ndef category():\n    def fp(p): return p.post_type==\'post\'\n    try:\n        cat_name = request.args[0]\n        cat = db(db.categories.category_name == cat_name\n                    ).select(db.categories.ALL)[0]\n        posts = db((db.posts.post_type == \'post\') &\n                   (db.posts.post_category == cat.id)\n                   ).select(db.posts.ALL) ## , orderby=~db.posts.post_time\n        filter(fp,posts)\n\n        response.sidebar_note = T("You are currently browsing the archives for the %(cat_name)s category.",dict(cat_name=cat_name))\n        return dict(posts = posts)\n    except:\n        redirect(URL(r = request,f = \'index\'))\n\n@auth.requires_login()\ndef add():\n    try:\n        area = request.args[0]\n\n        if area == "post":\n            db.posts.post_type.default = \'post\'\n            page_form = SQLFORM(db.posts, fields = [\'post_title\', \'post_text\', \n                                                    \'post_category\', \'is_translated\'], \n                                                    labels = post_labels)\n            page_form.append(INPUT(_type=\'checkbox\', \n                                    _name=\'post_attributes_content_is_original\', \n                                    _id=\'post_attributes_content_is_original\', value=\'\'))\n            page_title = T("Add Post")\n            \n            if page_form.accepts(request.vars, session):\n                tcode="post_id_"+str(page_form.vars.id)\n                from gluon.contrib import simplejson\n                _json=simplejson.loads(request.vars.post_attributes_json)\n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                pg=db(db.posts.id==page_form.vars.id).update(\n                                                post_text_TCode=tcode,\n                                                post_attributes_json=simplejson.dumps(_json))\n                ## FEATURE REQUEST: to add the translation code if not existing\n                T(tcode)\n                session.flash = T("Post added.")\n                redirect(URL(r = request,f = \'post/%i\' % page_form.vars.id))\n        \n        elif area == "page":\n            db.posts.post_type.default = \'page\'\n            page_form = SQLFORM(db.posts, fields = [\'post_title\', \'post_text\', \n                                                    \'show_in_menu\', \'is_translated\'], \n                                                    labels = post_labels)\n            page_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                    _id=\'post_attributes_content_is_original\', value=\'\'))\n            page_title = T("Add Page")\n            \n            if page_form.accepts(request.vars, session):\n                tcode="page_id_"+str(page_form.vars.id)\n                from gluon.contrib import simplejson\n                _json=simplejson.loads(request.vars.post_attributes_json)\n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                pg=db(db.posts.id==page_form.vars.id).update(\n                                                post_text_TCode=tcode,\n                                                post_attributes_json=simplejson.dumps(_json)\n                                            )\n                ## FEATURE REQUEST: to add the translation code if not existing\n                T(tcode)\n                session.flash = T("Page added.")\n                redirect(URL(r = request,f = \'page/%i\' % page_form.vars.id))          \n                \n        else:\n            redirect(URL(r = request,f = \'index\'))\n            \n        return dict(page_title = page_title, page_form = page_form)\n    except Exception, ex:\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n@auth.requires_login()\ndef edit():\n    this_item=None\n    area=None\n    id=None\n    p_a_c_i_o_val=None\n    try:\n        area = request.args[0]\n        id = int(request.args[1])\n        this_item = db(db.posts.id == id).select()[0]\n    except Exception, ex:\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        redirect(URL(r = request,f = \'index\'))\n\n    try:\n        from gluon.contrib import simplejson\n        _json=simplejson.loads(this_item.post_attributes_json)\n        p_a_c_i_o_val=\'on\' if _json[\'content_is\'][\'original\'] else \'\'\n    except Exception, ex:\n        session.flash=T("(Minor) Error occured: %(err)s ", dict(err=str(ex)))\n    \n    if area == \'post\':\n        edit_form = SQLFORM(db.posts, this_item, fields = [\'post_title\', \'post_text\', \'post_text_TCode\', \n                                                            \'post_category\',\'is_translated\'], \n                                                            deletable=True, labels = post_labels)\n        edit_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                _id=\'post_attributes_content_is_original\', value=p_a_c_i_o_val))\n        edit_title = T("Edit Post")\n    \n        if edit_form.accepts(request.vars, session):\n            if request.vars.delete_this_record==\'on\':\n                session.flash = T("Post deleted.")\n                redirect(URL(r = request,f = \'index/posts\'))\n            else:    \n                _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                db(db.posts.id==id).update(post_attributes_json=simplejson.dumps(_json))\n                session.flash = T("Post updated.")\n                redirect(URL(r = request,f = \'post/%s\' %id))\n\n    elif area == \'page\':\n        this_item = db(db.posts.id == id).select()[0]\n        edit_form = SQLFORM(db.posts, this_item, fields = [\'post_title\', \'post_text\', \'post_text_TCode\', \n                                                            \'is_translated\', \'show_in_menu\'], \n                                                            deletable=True, labels = post_labels)\n        edit_form.append(INPUT(_type=\'checkbox\', _name=\'post_attributes_content_is_original\', \n                                                 _id=\'post_attributes_content_is_original\', value=p_a_c_i_o_val))\n        edit_title = T("Edit Page")\n    \n        if edit_form.accepts(request.vars, session):\n            if request.vars.delete_this_record==\'on\':\n                session.flash = T("Page deleted.")\n                redirect(URL(r = request,f = \'pages\'))\n            else:\n                try:\n                    _json[\'content_is\'][\'original\']=request.vars.post_attributes_content_is_original==\'on\'\n                    db(db.posts.id==id).update(post_attributes_json=simplejson.dumps(_json))\n                    session.flash = T("Page updated.")\n                except Exception, ex:\n                    session.flash=T("(Minor) Error occured: %(err)s ", dict(err=str(ex)))\n                finally:\n                    redirect(URL(r = request,f = \'page/%s\' %id))\n                        \n    else:\n        redirect(URL(r = request,f = \'index\'))\n    \n    return dict(edit_form = edit_form, edit_title = edit_title, post=this_item)\n\n        \n@auth.requires_login()\ndef manage():\n\n    area = None\n    if len(request.args)>0:\n        area = request.args[0]\n    else:\n        area = \'post\'\n    \n    try: command = request.args[1]\n    except: command = ""\n        \n    if area == \'post\':\n        rows = db(db.posts.post_type == \'post\').select(db.posts.ALL)\n        manage_title = T(\'Manage Posts\')\n\n        if command == \'add\':\n            edit_form = SQLFORM(db.posts, labels = post_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Post added")\n                redirect(URL(r = request, f = \'manage/post\'))\n            else:\n                session.flash = T("Error")\n       \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_post = db(db.posts.id == id).select()[0]\n                edit_form = SQLFORM(db.posts, this_post)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Post updated")\n                    redirect(URL(r = request, f = \'manage/post\'))\n                else:\n                    session.flash = T("Error occured")\n        \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.posts.id == id).delete()\n                session.flash = T("Post deleted")\n                redirect(URL(r = request, f = \'index\'))\n        else:\n            edit_form = \'\'\n\n        return dict(rows = rows, manage_title = manage_title, edit_form = edit_form, area = area)\n    \n    elif area == \'link\':\n        rows = db().select(db.links.ALL)\n        manage_title = T(\'Manage Links\')\n\n        if command == \'add\':\n            edit_form = SQLFORM(db.links, labels = link_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Link added")\n                redirect(URL(r = request, f = \'manage/link\'))\n            else:\n                session.flash = T("Error occured")\n       \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_link = db(db.links.id == id).select()[0]\n                edit_form = SQLFORM(db.links, this_link)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Link updated")\n                    redirect(URL(r = request, f = \'manage/link\'))\n                else:\n                    session.flash = T("Error occured")\n        \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.links.id == id).delete()\n                session.flash = T("Link deleted")\n                redirect(URL(r = request, f = \'manage/link\'))\n        else:\n            edit_form = \'\'\n            \n        return dict(rows = rows, manage_title = manage_title, edit_form = edit_form, area = area)\n    \n    elif area == \'category\':\n        rows = db().select(db.categories.ALL)\n        manage_title = T(\'Manage Categories\')\n       \n        if command == \'add\':\n            edit_form = SQLFORM(db.categories, labels = cat_labels)\n            \n            if edit_form.accepts(request.vars, session):\n                session.flash = T("Category added")\n                redirect(URL(r = request, f = \'manage/category\'))\n        \n        elif command == \'edit\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                this_cat = db(db.categories.id == id).select()[0]\n                edit_form = SQLFORM(db.categories, this_cat)\n                \n                if edit_form.accepts(request.vars, session):\n                    session.flash = T("Category updated")\n                    redirect(URL(r = request, f = \'manage/category\'))\n                else:\n                    session.flash = T("Error occured")\n        \n        elif command == \'delete\':\n            try: id = request.args[2]\n            except: id = ""\n            \n            if id != \'\':\n                db(db.categories.id == id).delete()\n                session.flash = T("Category deleted")\n                redirect(URL(r = request, f = \'manage/category\'))\n        \n        else:\n            edit_form = \'\'\n\n        return dict(rows = rows, manage_title = manage_title, edit_form = edit_form, area = area)        \n    \n    else:\n        redirect(URL(r = request,f = \'index\'))\n\ndef error():\n    ticket=\'\'\n    code=\'\'\n    requested_uri=\'\'\n    err=\'\'\n\n    try:\n        ticket=request.vars.ticket\n        if ticket == \'None\': ticket=None\n        \n        code=request.vars.code\n        if code == \'None\': code=None\n        \n        requested_uri=request.vars.requested_uri\n        if requested_uri == \'None\': requested_uri=None\n    except Exception, ex:\n        err=str(ex)\n        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))\n        \n    return dict(ticket=ticket, code=code, requested_uri=requested_uri, err=err)\n        \ndef files():\n    upload_form=SQLFORM(db.files,labels=file_labels)\n    if request.vars.file!=None:\n        # TODO: strip_path_and_sanitize()\n        upload_form.vars.filename=request.vars.file.filename.lower()\n        if upload_form.accepts(request.vars,session):\n            response.flash=T(\'file uploaded\')\n        \n    download_form=FORM(LABEL(T(\'Enter file name\'))\n                        ,INPUT(_name="filename", requires=IS_NOT_EMPTY())\n                        ,INPUT(_type="submit",_value=T(\'Submit\')))\n    if (download_form.accepts(request.vars,session)\n        or (request.vars.download and request.vars.filename)):\n        _file=db(db.files.filename==request.vars.filename.lower()).select()\n        if _file: \n            _file=_file[0]\n            redirect(URL(r = request,f = \'download/%s/%s\' % (_file.file,_file.filename)))\n        else:\n            response.flash=T(\'no file found with the name %(filename)s\',\n                             dict(filename=request.vars.filename.lower()))\n        \n    return dict(upload_form=upload_form,download_form=download_form,\n                upload_title=T(\'upload\'),download_title=T(\'download\'))\n\ndef json():\n    area=request.args[0]\n    return response.json({\n        \'status\' : 1,\n        \'message\' : \'done\',\n        \'result\' : {\n            \'pages\' : lambda x: db(db.posts.post_type==\'page\').select()\n        }.get(request.args[0], None)(request.args[0])\n    })\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args[0]==\'logout\':\n        session.user_authorization_done=False\n    if auth.user and request.vars.next:\n        redirect(request.vars.next)\n    return dict(form=auth())\n\n\n@auth.requires_login()\ndef app_admin():\n    area=request.args[0]\n    if area==\'auth_user\':\n        form=SQLFORM(db.auth_user,response.anon_user,fields=[\'display_name\',\'email\'])\n        if request.post_vars.email:\n            auth.user.email=request.vars.email\n            \n            if (request.vars.email==response.anon_user.email and\n                request.vars.display_name==response.anon_user.display_name):\n                if form.accepts(request.vars,session):\n                    session.flash =T("Update done.")\n                    redirect(URL(r = request,f=\'index\'))\n                else:\n                    db.auth_user.insert(registration_id=auth.user.registration_id,\n                                        email=request.vars.email,\n                                        display_name=request.vars.display_name)\n                    session.flash =T("Data successfully saved.")\n                    redirect(URL(r = request,f=\'index\'))\n        return dict(form=form,area=area)\n    if area==\'user\':\n        if auth.user:\n            if auth.user.is_admin:\n                _fields=[\'registration_id\',\'display_name\',\'email\',\'is_admin\']\n            else:\n                _fields=[\'display_name\',\'email\']\n                \n            form=None\n            usr=None\n            if len(request.args)>1 and len(request.args[1])>0:\n                usr=db(db.auth_user.id==request.args[1]).select()\n                if len(usr)>0:usr=usr[0]\n                else:\n                    session.flash=\'User not found.\'\n                    redirect(URL(r=request,f=\'app_admin/user/\'))\n                form=SQLFORM(db.auth_user,usr,fields=_fields,deletable=True)\n                if form.accepts(request.vars,session):\n                    if request.vars.delete_this_record==\'on\':\n                        response.flash=T(\'User deleted.\')\n                    else:\n                        response.flash=T(\'User updated.\')\n                _form_title=T("edit user")\n            else:\n                form=SQLFORM(db.auth_user,fields=_fields)\n                if form.accepts(request.vars,session):\n                    session.flash=\'User created.\'\n                    redirect(URL(r=request,f=\'app_admin/user/%(id)i\' % form.vars.id))\n                _form_title=T("create user")\n            return dict(form=form,area=area,form_title=_form_title)\n        else:            \n            response.flash=T(\'woooups... not allowed\')\n            return dict(form=\'...\',area=area,form_title=\'...\')\n\ndef download():\n    import os\n    return response.stream(open(os.path.join(request.folder,\'uploads\',request.args[0]),\'rb\'))\n\n@auth.requires_login()\ndef do_stuff():\n    if request.args[0]==\'u_tcode_istrans\':\n        for pg in _pages:\n            tcode="page_id_"+str(pg.id)\n            is_trans=str(pg.id) in request.vars.ids.split(\',\')\n            upd=db(db.posts.id==pg.id).update(post_text_TCode=tcode,is_translated=is_trans)\n        session.flash=T(\'Translated pages post text T code updated.\')\n    elif request.args[0]==\'u_none_tcode_istrans\':\n        for pg in _pages:\n            tcode="page_id_"+str(pg.id)\n            if str(pg.id) in request.vars.ids.split(\',\'):\n                upd=db(db.posts.id==pg.id).update(post_text_TCode=None,is_translated=False)\n        session.flash=T(\'Translated pages post text T code updated.\')\n    elif request.args[0]==\'u_auth_user\':\n        for au in db().select(db.auth_user.ALL):\n            upd=db(db.auth_user.id==au.id).update(is_admin=False,is_anonymous=False)\n        session.flash=T(\'Auth user fields updated.\')\n        \n    redirect(URL(r = request,f = \'index\'))\n\nresponse._vars=response._caller(page)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.NameError object at 0x926ee6c>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.NameError object at 0x926ee6c>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.NameError object at 0x926ee6c>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.NameError object at 0x926ee6c>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.NameError object at 0x926ee6c>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.NameError object at 0x926ee6c>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.NameError object at 0x926ee6c>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.NameError object at 0x926ee6c>"
p26
sS'args'
p27
S'("global name \'auth_users\' is not defined",)'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.NameError object at 0x926ee6c>"
p30
sS'__class__'
p31
S"<type 'exceptions.NameError'>"
p32
sS'__delattr__'
p33
S"<method-wrapper '__delattr__' of exceptions.NameError object at 0x926ee6c>"
p34
sS'__repr__'
p35
S"<method-wrapper '__repr__' of exceptions.NameError object at 0x926ee6c>"
p36
sS'__dict__'
p37
S'{}'
p38
sS'__doc__'
p39
S"'Name not found globally.'"
p40
sS'__init__'
p41
S"<method-wrapper '__init__' of exceptions.NameError object at 0x926ee6c>"
p42
sS'__new__'
p43
S'<built-in method __new__ of type object at 0x8239980>'
p44
ssS'evalue'
p45
S"global name 'auth_users' is not defined"
p46
sS'request'
p47
(dp48
S'function'
p49
S"'page'"
p50
sS'body'
p51
S'<cStringIO.StringO object at 0x9300ea0>'
p52
sS'wsgi'
p53
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p54
sS'extension'
p55
S"'html'"
p56
sS'vars'
p57
S'<Storage {}>'
p58
sS'cid'
p59
S'None'
p60
sS'url'
p61
S'<gluon.html.XML object at 0x93007ec>'
p62
sS'raw_extension'
p63
S'None'
p64
sg27
S"['24']"
p65
sS'controller'
p66
S"'default'"
p67
sS'cookies'
p68
S"<SimpleCookie: session_id_admin='127.0.0.1-7f3ba...:343c6714-14e6-4390-81a7-ae3115834c05' theme='1'>"
p69
sS'application'
p70
S"'a'"
p71
sS'ajax'
p72
S'False'
p73
sS'client'
p74
S"'127.0.0.1'"
p75
sS'env'
p76
S"<Storage {'wsgi_multithread': True, 'http_accept...nput': <socket._fileobject object at 0x92d7bc4>}>"
p77
sS'raw_args'
p78
S"'24'"
p79
sS'get_vars'
p80
S'<Storage {}>'
p81
sS'folder'
p82
S"'/home/herve/development/workspaces/molhokwai.net/web/applications/a/'"
p83
sS'now'
p84
S'datetime.datetime(2011, 1, 7, 8, 39, 33, 515446)'
p85
sS'post_vars'
p86
S'<Storage {}>'
p87
ssS'frames'
p88
(lp89
(dp90
S'file'
p91
S'/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py'
p92
sS'dump'
p93
(dp94
S'environment'
p95
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x918250c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p96
sS'ccode'
p97
S'<code object <module> at 0x8f90770, file "/home/...b/applications/a/controllers/default.py", line 4>'
p98
ssS'lnum'
p99
I188
sS'lines'
p100
(dp101
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p102
sI183
S'        if type(code) == types.CodeType:'
p103
sI184
S'            ccode = code'
p104
sI185
S'        else:'
p105
sI186
S'            ccode = compile2(code,layer)'
p106
sI187
S''
sI188
S'        exec ccode in environment'
p107
sI189
S'    except HTTP:'
p108
sI190
S'        raise'
p109
sI191
S'    except Exception:'
p110
ssS'call'
p111
S'(code="###################################\\n## CONTROLLE...\'index\'))\\n\\nresponse._vars=response._caller(page)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'AppDetails\': <class __builtin__.AppDetails at 0x918250c>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, ...}, layer=\'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py\')'
p112
sS'func'
p113
S'restricted'
p114
sa(dp115
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py'
p116
sg93
(dp117
S'post_helper'
p118
S'undefined'
p119
sS'common.controller_init'
p120
S'<function controller_init at 0x92d7b54>'
p121
sS'page_helper'
p122
g119
sS'db'
p123
S"<DAL {'auth_permission': <Table {'ALL': <gluon.d..._name': <gluon.dal.Field object at 0x91db92c>}>}>"
p124
sS'cache'
p125
S'<gluon.cache.Cache object at 0x93002ac>'
p126
sS'request'
p127
S"<Storage {'function': 'page', 'body': <cStringIO..., 8, 39, 33, 515446), 'post_vars': <Storage {}>}>"
p128
sS'session'
p129
S"<Storage {'auth': None}>"
p130
sS'common'
p131
S"<module 'applications.a.modules.common' from 'applications/a/modules/common.py'>"
p132
sS'response'
p133
S"<Storage {'status': 200, 'body': <cStringIO.Stri...926e5ac>, 'files': [], '_custom_rollback': None}>"
p134
sS'T'
S'<gluon.languages.translator object at 0x930032c>'
p135
ssg99
I5
sg100
(dp136
I2
S'## CONTROLLER INITIALIZATION'
p137
sI3
S'###################################'
p138
sI4
S"exec('from applications.%s.modules import common' % this_app)"
p139
sI5
S'page_helper, post_helper = common.controller_init(request, response, session, cache, T, db)'
p140
sI6
S''
sI7
S'###################################'
p141
sI8
S'## CONTROLLER FUNCTIONS'
p142
sI9
S'###################################'
p143
sI10
S'# The main page'
p144
sI11
S"# Shows the home page if one created (see 'home_page' function page with title)"
p145
ssg111
S'()'
p146
sg113
S'<module>'
p147
sa(dp148
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/modules/common.py'
p149
sg93
(dp150
S'global init_app'
p151
S'<function init_app at 0x90555a4>'
p152
ssg99
I105
sg100
(dp153
I100
S'def controller_init(request, response, session, cache, T, db):'
p154
sI101
S'    # This sets the session authorization values'
p155
sI102
S'    auth_users=db().select(db.auth_user.ALL)'
p156
sI103
S'    response.auth_users=auth_users'
p157
sI104
S''
sI105
S'    init_app(request, response, session, cache, T, db)'
p158
sI106
S''
sI107
S'    if (not auth.user is None and not session.user_authorization_done):'
p159
sI108
S'        user_authorization(request, response, session, cache, T, db)'
p160
sI109
S'        session.user_authorization_done=True'
p161
ssg111
S"(request=<Storage {'function': 'page', 'body': <cStringIO..., 8, 39, 33, 515446), 'post_vars': <Storage {}>}>, response=<Storage {'status': 200, 'body': <cStringIO.Stri...926e5ac>, 'files': [], '_custom_rollback': None}>, session=<Storage {'auth': None}>, cache=<gluon.cache.Cache object at 0x93002ac>, T=<gluon.languages.translator object at 0x930032c>, db=<DAL {'auth_permission': <Table {'ALL': <gluon.d..._name': <gluon.dal.Field object at 0x91db92c>}>}>)"
p162
sg113
S'controller_init'
p163
sa(dp164
g91
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/modules/common.py'
p165
sg93
(dp166
S'auth_users'
p167
g119
sS'au'
p168
g119
ssg99
I24
sg100
(dp169
I19
S'###################################'
p170
sI20
S'## METHODS'
p171
sI21
S'###################################'
p172
sI22
S'def init_app(request, response, session, cache, T, db):'
p173
sI23
S'    """Application first run initialization"""'
p174
sI24
S'    for au in auth_users:'
p175
sI25
S"        if au.email=='anonymous@molhokwai.net':response.anon_user=au"
p176
sI26
S'    if response.anon_user is None:'
p177
sI27
S'        response.anon_user_id=db.auth_user.insert('
p178
sI28
S"                            registration_id='http://anonymous@molhokwai.net',"
p179
ssg111
S"(request=<Storage {'function': 'page', 'body': <cStringIO..., 8, 39, 33, 515446), 'post_vars': <Storage {}>}>, response=<Storage {'status': 200, 'body': <cStringIO.Stri...926e5ac>, 'files': [], '_custom_rollback': None}>, session=<Storage {'auth': None}>, cache=<gluon.cache.Cache object at 0x93002ac>, T=<gluon.languages.translator object at 0x930032c>, db=<DAL {'auth_permission': <Table {'ALL': <gluon.d..._name': <gluon.dal.Field object at 0x91db92c>}>}>)"
p180
sg113
S'init_app'
p181
sasS'pyver'
p182
S'Python 2.5.1: /usr/local/bin/python'
p183
sS'session'
p184
(dp185
S'auth'
p186
S'None'
p187
ssS'etype'
p188
S"<type 'exceptions.NameError'>"
p189
sS'date'
p190
S'Fri Jan  7 08:39:33 2011'
p191
sS'response'
p192
(dp193
S'status'
p194
S'200'
p195
sg51
S'<cStringIO.StringO object at 0x9300380>'
p196
sg68
S"<SimpleCookie: session_id_a='127.0.0.1-670c5aca-c8fe-47a0-9626-18d05092a69f'>"
p197
sS'_custom_rollback'
p198
S'None'
p199
sS'_vars'
p200
S'None'
p201
sS'menu'
p202
S'[]'
p203
sS'flash'
p204
S"''"
p205
sS'session_new'
p206
S'True'
p207
sS'files'
p208
S'[]'
p209
sS'session_id'
p210
S"'127.0.0.1-670c5aca-c8fe-47a0-9626-18d05092a69f'"
p211
sS'headers'
p212
S"<Storage {'Expires': 'Fri, 07 Jan 2011 07:39:33 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p213
sS'meta'
p214
S'<Storage {}>'
p215
sS'session_filename'
p216
S"'/home/herve/development/workspaces/molhokwai.net...ns/127.0.0.1-670c5aca-c8fe-47a0-9626-18d05092a69f'"
p217
sS'postprocessing'
p218
S'[]'
p219
sS'_caller'
p220
S'<function <lambda> at 0x8f9a6bc>'
p221
sS'_view_environment'
p222
S"{'A': <class 'gluon.html.A'>, 'AppDetails': <class __builtin__.AppDetails at 0x918250c>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p223
sS'session_id_name'
p224
S"'session_id_a'"
p225
sS'_custom_commit'
p226
S'None'
p227
sS'auth_users'
p228
S'<gluon.dal.Rows object at 0x926e5ac>'
p229
sS'view'
p230
S"'default/page.html'"
p231
ssS'locals'
p232
(dp233
S'db'
p234
S"<DAL {'auth_permission': <Table {'ALL': <gluon.d..._name': <gluon.dal.Field object at 0x91db92c>}>}>"
p235
sS'cache'
p236
S'<gluon.cache.Cache object at 0x93002ac>'
p237
sg47
S"<Storage {'function': 'page', 'body': <cStringIO..., 8, 39, 33, 515446), 'post_vars': <Storage {}>}>"
p238
sg184
S"<Storage {'auth': None}>"
p239
sS'T'
S'<gluon.languages.translator object at 0x930032c>'
p240
sg192
S"<Storage {'status': 200, 'body': <cStringIO.Stri...926e5ac>, 'files': [], '_custom_rollback': None}>"
p241
sssS'traceback'
p242
S'Traceback (most recent call last):\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/controllers/default.py", line 5, in <module>\n    page_helper, post_helper = common.controller_init(request, response, session, cache, T, db)\n  File "applications/a/modules/common.py", line 105, in controller_init\n    init_app(request, response, session, cache, T, db)\n  File "applications/a/modules/common.py", line 24, in init_app\n    for au in auth_users:\nNameError: global name \'auth_users\' is not defined\n'
p243
s.