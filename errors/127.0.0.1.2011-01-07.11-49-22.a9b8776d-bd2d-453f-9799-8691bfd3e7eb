(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/herve/development/workspaces/molhokwai.net/web/applications/a/models/db.py'
p4
sS'code'
p5
S'#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db=db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db=MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db=SQLDB("sqlite://db.db")\n\n\n#################################\n## APPLICATION CONFIG\n#################################\n\n## Administrators\nadministrators_emails=[\'molhokwai@gmail.com\']\n\n## Table app config\ndb.define_table(\'app_config\',\n    SQLField(\'APP_DETAILS\',             \'list:string\', required=True,    default=[\'<molhokwai.net-a>\', \'<v001>\'],     \n            label=T(\'App details (name, version)\')),\n    SQLField(\'RPX_API\',                 \'list:string\', required=True,    default=[\'<XXXXXXXXXXXXX>\', \'<websites.molhokwai>\'],    \n            label=T(\'Rpx api (key, sub-domain)\')),\n    SQLField(\'APP_CURRENT_LANGUAGES\',   \'list:string\', required=True,    default=[\'en\', \'he\', \'hi\', \'es\', \'fr\', \'sw\'], \n            label=T(\'Languages\')),\n    SQLField(\'APP_METAS\',               \'list:string\', required=True,    default=[\'<title>\', \'<web, utility, application, software, cms, dms>\', \'<description>\'],  \n            label=T(\'App Metas (title, keywords, description)\')),\n    SQLField(\'MAIL_SETTINGS\',           \'list:string\',                   default=["<sender@gmail.com>", \'<smtp.gmail.com:587>\', \'<username:password>\'],\n            label=T(\'Mail settings (sender, server, login)\')),           \n    SQLField(\'PICASA_API\',              \'list:string\',                   default=["<username>", \'<password>\'],\n            label=T(\'Picasa api (username, password)\'))\n)\napp_config=db(db.app_config.id>0).select()\nif len(app_config)>0:\n    app_config=app_config[0]\n\n#########################################################################\n## Global convenience variables\n#########################################################################\nprotocol=\'http\'\nif request.get(\'env\')[\'server_protocol\'][:5]==\'HTTPS\':protocol=\'https\'\nglobal_site_url=\'%s://%s\' % (protocol,request.get(\'env\')[\'http_host\'])\n\nthis_app=request.application\nthis_app_url= global_site_url + \'/%s\' % this_app\n\n#########################################################################\n## Authentication / Authorization\n#########################################################################\nfrom gluon.tools import *\nauth=Auth(globals(),db)              # authentication/authorization\ncrud=Crud(globals(),db)              # for CRUD helpers using auth\nservice=Service(globals())           # for json, xml, jsonrpc, xmlrpc, amfrpc\n\n# mail=Mail()                                                   # mailer\n# if app_config and app_config.MAIL_SETTINGS:\n#     mail.settings.server=app_config.MAIL_SETTINGS[0]     # your SMTP server\n#     mail.settings.sender=app_config.MAIL_SETTINGS[1]     # your email\n#     mail.settings.login=app_config.MAIL_SETTINGS[2]       # your credentials or None\n# else:\n#     mail.settings.server=\'smtp.gmail.com:587\'     # your SMTP server\n#     mail.settings.sender=\'herve.m@wedo-group.com\' # your email\n#     mail.settings.login=\'username:password\'       # your credentials or None\n\nauth.settings.hmac_key=\'sha512:83f40f07-e0b6-41c2-8549-c29c9a591d9b\'\nauth.settings.table_user = db.define_table(\'auth_user\',    \n    Field(\'registration_id\', length=512,\n          label=T(\'registration id\'),\n          requires = [IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'auth_user.registration_id\')],\n          readable=False),\n    Field(\'display_name\', length=512,\n          label=T(\'display name\'),\n          requires = [IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'auth_user.display_name\')]),\n    Field(\'email\', length=512,default=\'\',\n          label=T(\'email\'),\n          requires = [IS_EMAIL(),IS_NOT_IN_DB(db,\'auth_user.email\')]),\n    Field(\'is_admin\', \'boolean\',default=False),\n    Field(\'is_anonymous\', \'boolean\',default=True),\n    Field(\'registration_key\'),\n    Field(\'first_name\'),\n    Field(\'last_name\')\n)\nauth.define_tables()                 # creates all specified & needed tables\n\n# auth.settings.mailer=mail          # for user email verification\n# auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n# auth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\n# auth.settings.reset_password_requires_verification = True\n# auth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n## OpenID, Facebook, MySpace, Twitter, Linkedin, etc. registration\nprotocol=\'http\'\nif request.get(\'env\')[\'server_protocol\'][:5]==\'HTTPS\':protocol=\'https\'\n\nfrom gluon.contrib.login_methods.rpx_account import RPXAccount\nauth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\nif app_config and app_config.RPX_API:\n    auth.settings.login_form = RPXAccount(request, api_key=app_config.RPX_API[0],\n        domain=app_config.RPX_API[1],\n        url = "%s/default/user/login" % this_app_url)\nelse:\n    auth.settings.login_form = RPXAccount(request, api_key=\'33becd821e0f24f16bdb8da14c1723987d6487a9\',\n        domain=\'websites-molhokwai\',\n        url = "%s/default/user/login" % this_app_url)\n\n############\n## Language\n############\ncurrent_language=\'en\'\nif app_config and app_config.CURRENT_LANGUAGES:\n    T.current_languages=app_config.CURRENT_LANGUAGES\n    current_language=app_config.CURRENT_LANGUAGES[0]\nelse:\n    T.current_languages=[\'en\',\'fr\']\ncurrent_language=\'en\'\nif request.vars._language:\n    session._language=request.vars._language\nif session._language:\n    T.force(session._language)\nelse:\n    if T.http_accept_language:\n        if T.http_accept_language[:2]==\'fr\':\n            current_language=T.current_languages[1]\n        else:\n            current_language=T.current_languages[0]\n    else:\n        current_language=T.current_languages[0]\n        \n    current_language=({}.get(current_language,lambda x: x+\'-\'+x)\n            )(current_language)\n    T.force(current_language)\n    \nimport datetime\n\n## Table posts\n## Fields:\n## ------\n##    post_text_TCode: To enter a translation code and fill in the translation texts in a way compliant with\n##        the built-in translation mechanism (T).\n##        ***Only one of the post_text_TCode and the post_text fields is necessary.***\n##        The system first checks the *post_text_TCode* field and if not filled in, falls back to the *post_text* field\n##    is_translated: if the translation (whether for the post_text, or the post_text_TCode) is done in all the languages \n##        available in the application). To be manually set once the translation in all languages for the post/page is done.\ndb.define_table(\'posts\',\n    SQLField(\'post_title\', required=True),\n    SQLField(\'post_text\', \'text\'),\n    SQLField(\'post_text_TCode\', \'string\',  writable=True),\n    SQLField(\'post_time\', \'datetime\', default=datetime.datetime.today()),\n    SQLField(\'post_type\', required=True),\n    SQLField(\'post_category\', required=True, default=-1),\n    SQLField(\'show_in_menu\',  \'boolean\', required=True, default=False),\n    SQLField(\'is_translated\', \'boolean\', required=True, default=False),\n    SQLField(\'post_attributes_json\', \'text\', required=True, \n            default="""{\n                "content_is" : {\n                    "original" : false\n                }\n            }""")\n    )\n\ndb.define_table(\'comments\',\n    SQLField(\'post_id\', db.posts, required=True),\n    SQLField(\'comment_author\'),\n    SQLField(\'comment_author_email\', required=True),\n    SQLField(\'comment_author_website\'),\n    SQLField(\'comment_text\', \'text\', required=True),\n    SQLField(\'comment_time\', \'datetime\', required=True, default=datetime.datetime.today()))\n\ndb.define_table(\'categories\',\n    SQLField(\'category_name\', required=True))\n\n##db.define_table(\'posts_categories\',\n##    SQLField(\'category\', db.categories, required=True),\n##    SQLField(\'post\', db.posts, required=True))\n    \ndb.define_table(\'links\',\n    SQLField(\'link_title\', required=True),\n    SQLField(\'link_url\', required=True))\n\ndb.posts.post_type.requires = IS_IN_SET([\'post\', \'page\'])\ndb.posts.post_category.requires = IS_IN_DB(db, \'categories.id\', \'categories.category_name\')\n\n\ndb.define_table(\'files\',\n    SQLField(\'file\',\'upload\', required=True),\n    SQLField(\'filename\', required=True)\n)\ndb.files.filename.requires = IS_NOT_IN_DB(db, \'files.filename\')\n\n\npost_labels = {\n    \'post_title\':\'Title\',\n    \'post_text\':\'Post\',\n    \'post_text_TCode\':\'Translation code (code & language texts must be set in the translation files)\',\n    \'post_time\':\'Post Date\',\n    \'post_type\':\'Type\',\n    \'post_category\':\'Category\',\n    \'show_in_menu\':\'Show in menu\'\n}\n\ncomment_labels = {\n    \'comment_author\':\'Name\',\n    \'comment_author_email\':\'Email\',\n    \'comment_author_website\':\'Website\',\n    \'comment_text\':\'Comment\',\n    \'post_id\':\'Post ID\'\n}\n\nlink_labels = {\n    \'link_title\':\'Name\',\n    \'link_url\':\'URL\'\n}\n\ncat_labels = {\n    \'category_name\':\'Name\'\n}\n\nfile_labels = {\n    \'file\':\'File\',\n    \'filename\':\'Enter file name\'\n}\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/herve/development/workspaces/molhokwai.net/web/applications/a/models/db.py", line 116, in <module>\n    if app_config and app_config.CURRENT_LANGUAGES:\n  File "/home/herve/development/workspaces/molhokwai.net/web/gluon/dal.py", line 3170, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'CURRENT_LANGUAGES\'\n'
p10
s.