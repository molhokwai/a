# This sets the session authorization values
auth_users=db().select(db.auth_user.ALL)
response.auth_users=auth_users

def init_app():
    """Application first run initialization"""
    if request.vars.app_cfg_NAME:
        app_config=db(db.app_config.id>0)
        if len(app_config.select())>0:
            app_config.update(
                NAME=request.vars.app_cfg_NAME,
                GDATA_API_CONSUMER_KEY=request.vars.app_cfg_GDATA_API_CONSUMER_KEY,
                GDATA_API_CONSUMER_KEY=request.vars.app_cfg_GDATA_API_CONSUMER_SECRET
            )
        else:
            db.app_config.insert(
                NAME=request.vars.app_cfg_NAME,
                GDATA_API_CONSUMER_KEY=request.vars.app_cfg_GDATA_API_CONSUMER_KEY,
                GDATA_API_CONSUMER_KEY=request.vars.app_cfg_GDATA_API_CONSUMER_SECRET
            )
    for au in auth_users:
        if au.email=='anonymous@molhokwai.net':response.anon_user=au
    if response.anon_user is None:
        response.anon_user_id=db.auth_user.insert(
                            registration_id='http://anonymous@molhokwai.net',
                            display_name='anonymous',
                            email='anonymous@molhokwai.net',
                            is_anonymous=True
                            )
        response.anon_user=db(db.auth_user.id==response.anon_user_id).select()[0]

    try:
        if not db(db.posts.post_title=='a_home').select():
            db.posts.insert(
                post_type='page',
                post_title='a_home',
                post_text=app_details.init_app_config['pages']['home'],
                show_in_menu=True
                )
        if not db(db.posts.post_title=='a_help').select():
            db.posts.insert(
                post_type='page',
                post_title='a_help',
                post_text=app_details.init_app_config['pages']['help'],
                show_in_menu=True
                )
    except Exception, ex:
        session.flash=T("Error occured: %(err)s ", dict(err=str(ex)))
init_app()        

def get_usr_display_name(usr):
    display_name=usr.preferredUsername
    if display_name is None or display_name=='':
        display_name=usr.first_name
    if display_name is None or display_name=='':
        display_name=usr.last_name
    return display_name

def user_authorization():
    display_name=get_usr_display_name(auth.user)
    if display_name is None or display_name=='':
        if (auth.user.email is None or auth.user.email==''):
            flash_msg="You are logged in. Your provider sent us empty email and username."
            flash_msg+="Click <a href='%(app_admin_url)s'>here</a> to fill in the data or continue as anonymous."
            session.flash=T(flash_msg,dict(app_admin_url=URL(r = request,f='app_admin/auth_user')))
        else:
            display_name=auth.user.email.split('@')[0]
            flash_msg="You are logged in. With display name: %(display_name)s and email: %(email)s."
            flash_msg+="Click <a href='%(app_admin_url)s'>here</a> to modify these data."
            session.flash=T(flash_msg,dict(app_admin_url=URL(r = request,f='app_admin/auth_user'),
                                        display_name=display_name,email=auth.user.email))
    session.authorized=auth.user.is_admin


if (not auth.user is None and not session.user_authorization_done):
    user_authorization()
    session.user_authorization_done=True

if auth.user and (auth.user.display_name is None or auth.user.display_name==''):
    display_name=get_usr_display_name(auth.user)
    if display_name is None or display_name =='':
        display_name='anonymous@molhokwai.net'
    auth.user.display_name=display_name

response.title = app_details.title
response.keywords = app_details.keywords
response.description = app_details.description

# This dynamically adds the pages to the menu
_pages = db(db.posts.post_type == 'page').select(db.posts.ALL)
items = []
menu_items = []
for page in _pages:
    item = [page.post_title, False, '/%(app)s/default/page/%(id)s' % {'app':request.application, 'id':page.id}]
    items.append(item)
    if page.show_in_menu and len(menu_items)<10:
      menu_items.append(item)
response.pages = items
response.menu=menu_items

# page helper
class PageHelper():
    _title=''
    def get_page_by_title(self,item):
        return item.post_title.lower()==self._title

# instance
page_helper=PageHelper()
post_helper=PageHelper()

# This gets the home page, if one created
def home_page():
    """Convention over configuration: Home page is the one with title T('zorglub'),
        The corresponding eventual language translation of 'home'.
        
        TODO: as proprty in a configuration framework (see if pypress4gae offers home/index page
        configuration, and if so eventually switch to it)
    """
    if response.menu:
        page_helper._title='a_home'
        return filter(page_helper.get_page_by_title,_pages)
_home_page=home_page()
response.home_page=_home_page[0] if (_home_page and len(_home_page)>0) else None


# This gets the help page, if one created
def help_page():
    """See home_page"""
    if response.menu:
        page_helper._title='a_help'
        return filter(page_helper.get_page_by_title,_pages)
_help_page=help_page()
response.help_page=_help_page[0] if (_help_page and len(_help_page)>0) else None

# This returns all the categories and their post count
cats = db().select(db.categories.ALL)
items = []
for cat in cats:
    count = len(db(
                   (db.posts.post_type == 'post') & 
                   (db.posts.post_category == cat.id)
                   ).select(db.posts.ALL,orderby=~db.posts.post_time))
    if count > 0:
        item = [cat.category_name, count, '/%(app)s/default/category/%(name)s' % {'app':request.application, 'name':cat.category_name}]
        items.append(item)
response.categories = items

# This returns all the links
links = db().select(db.links.ALL)
items = []
for link in links:
    item = [link.link_title, link.link_url, link.id]
    items.append(item)
response.links = items


# Theme
response.themes=['0', '1']
if request.vars.theme:
    response.cookies['theme'] = request.vars.theme
    response.cookies['theme']['expires'] = 365 * 24 * 3600
    response.cookies['theme']['path'] = '/'

response.theme = '0'
if request.vars.theme:
    response.theme = request.vars.theme
elif request.cookies.has_key('theme'):
    response.theme = request.cookies['theme'].value

# from http://code.google.com/apis/gdata/docs/auth/oauth.html
import gdata
import gdata.gauth
import gdata.docs.client

# keys & scope
SOURCE='molhokwai.net-cms-v001'
CONSUMER_KEY = 'www.molhokwai.net'
CONSUMER_SECRET = '0h7hlMG//1ZAVR2H1fsxDqL6'
SCOPES = ['https://docs.google.com/feeds/'] #'http://picasaweb.google.com/data/'
SIG_METHOD=gdata.auth.OAuthSignatureMethod.HMAC_SHA1

client = gdata.docs.client.DocsClient(source=SOURCE)
oAuthInputParameters=(gdata.auth.OAuthSignatureMethod.HMAC_SHA1,CONSUMER_KEY,CONSUMER_SECRET)


##    GData v2.0+ (GDClient)
##    ---------------------
def index():
    if 'http_referer' in request.env:
        session.redirect_url = redirect(request.env['http_referer'])

    # request token
    oauth_callback_url = '%s/oauth/get_access_token' % this_app_url
    request_token = client.GetOAuthToken(
        SCOPES, oauth_callback_url, CONSUMER_KEY, consumer_secret=CONSUMER_SECRET)

    # actual request token oauth call
    domain = None  # If on a Google Apps domain
    redirect(str(request_token.generate_authorization_url(google_apps_domain=domain)))
    session.request_token=request_token

def get_access_token():
    try:
        saved_request_token = session.request_token
        request_token = gdata.gauth.AuthorizeRequestToken(saved_request_token, str(request.url))
        session.access_token = client.GetAccessToken(request_token)
        if session.redirect_url:
            redirect(session.redirect_url)
            session.redirect_url=None
        else:
            redirect('%s/media/picasa/albums' % this_app_url)
    
    except Exception, ex:
        log_wrapped('Error in /%s/oauth/get_access_token: ' % this_app,  str(ex))
        print 'Error in /%s/oauth/get_access_token: ' % this_app,  str(ex)

def usage():
    client.SetOAuthInputParameters(SIG_METHOD, CONSUMER_KEY, consumer_secret=CONSUMER_SECRET)
    client.SetOAuthToken(gdata.auth.OAuthToken(key=access_token.key, secret=access_token.secret))
    
    feed = client.GetDocumentListFeed()
    for entry in feed.entry:
      print entry.title.text


def get_gdata_client():
    """Getting Client for Usage"""
    access_token=session.access_token
    oAuthInputParameters=(gdata.auth.OAuthSignatureMethod.HMAC_SHA1,CONSUMER_KEY,CONSUMER_SECRET)
    client = gdata.docs.client.DocsClient(source=SOURCE)
    client.SetOAuthInputParameters(SIG_METHOD, CONSUMER_KEY, consumer_secret=CONSUMER_SECRET)
    client.SetOAuthToken(gdata.auth.OAuthToken(key=access_token.key, secret=access_token.secret))
    return client

##    GData v1.x+ (GDClient)
##    ---------------------
"""
def index():
    if 'http_referer' in request.env:
        session.redirect_url = redirect(request.env['http_referer'])

    client.SetOAuthInputParameters(gdata.auth.OAuthSignatureMethod.HMAC_SHA1,CONSUMER_KEY,CONSUMER_SECRET)
    request_token = client.FetchOAuthRequestToken()
    session.request_token=request_token
    
    client.SetOAuthToken(request_token)

    oauth_callback_url = '%s/oauth/get_access_token?oauth_token_secret=%s' % (this_app_url, request_token.secret)
    redirect(client.GenerateOAuthAuthorizationURL(callback_url=oauth_callback_url))

class URL:
    params={}
    value=''

def get_access_token():
    try:
        url_O=URL()
        url_O.params=request.vars
        url_O.value=request.url
        
        oauth_token = gdata.auth.OAuthTokenFromUrl(url_O)
        if oauth_token:
            oauth_token.secret = session.request_token.secret
            oauth_token.oauth_input_params = gdata.auth.OAuthInputParams(gdata.auth.OAuthSignatureMethod.HMAC_SHA1,CONSUMER_KEY,CONSUMER_SECRET)
            session.oauth_token=oauth_token

            client.SetOAuthToken(oauth_token)
            session.access_token = client.UpgradeToOAuthAccessToken()
            
            if session.redirect_url:
                redirect(session.redirect_url)
                session.redirect_url=None
            else:
                redirect('%s/media/picasa/albums' % this_app_url)
        else:
          print 'No oauth_token found in the URL'
    except Exception, ex:
        log_wrapped('Error in /%s/oauth/get_access_token: ' % this_app,  str(ex))
        print 'Error in /%s/oauth/get_access_token: ' % this_app,  str(ex)

def usage():
    oauth_token=session.oauth_token
    client.SetOAuthInputParameters(SIG_METHOD, CONSUMER_KEY, consumer_secret=CONSUMER_SECRET)
    client.SetOAuthToken(gdata.auth.OAuthToken(key=oauth_token.key, secret=oauth_token.secret))
    
    feed = client.GetAlbumsListFeed()
    for entry in feed.entry:
      print entry.title.text
"""
