from Entity import *

class Template(object):

    """
     

    :version:
    :author:
    """

    """ ATTRIBUTES

    menu  (public) (documentation only)
    footer  (public) (documentation only)
    container  (public) (documentation only)
    entityBlocks  (private)
    	Abstract attribute to be implemented in child Page

   	Mapping by type:
    	- Entity type (Post, NewsUpdate, Service...)
    	- Block by coordinates :
            ([0,0] -left top,   [0,1]  -left borrom,
              [1,0] -right top, [1,1] -right bottom )
    """
    entityBlocks = None 

    _blocks = None
    @property
    def blocks():
        if not self._blocks:
            self._blocks = []
            for x in range(len(self.entityBlocks)):
                self._blocks.append([])
                for y in range(len(self.entityBlocks[x])):
                    self._blocks[x].append(self.entityBlocks[x][y])
        return _self.blocks

    def output(self):
        """
         Method using blocksOutput method, and doing footer, header, container... output
		 Method not used in classical MVC frameworks, as View is self contained, with header, 
		 footer, container... and calls/invokes Controllers' objects atomically for the 
		 corresponding sections'/portions'/blocks' outputs.

        @return  :
        @author
        """
        pass

    def __init__(self, entityBlocks):
        """
        @param EntityBlock entityBlocks : 
        @return  :
        @author
        """
        self.entityBlocks = entityBlocks

    def _blocksOutput(self, entityBlocks=None):
        """
        Method not used in classical MVC frameworks, as View is self contained, with header, 
         footer, container... and calls/invokes Controllers' objects atomically for the 
         corresponding sections'/portions'/blocks' outputs.

        @param EntityBlock opt_entityBlocks : Uses the class's entityBlocks attribute unless optional entityBlocks parameter given
        @return BlockBase :
        @author
        """
        pass

    def _populateEntityBlocks(self, entityBlocks=None):
        """
        Method used to get and assign the entities for each entityBlock. 

        @param EntityBlock opt_entityBlocks : Uses the class's entityBlocks attribute unless optional entityBlocks parameter given
        @return Entity :
        @author
        """
        for entityBlock in entityBlocks:
			entityBlock.entities = Entity.fetch(entityBlock.query) 


